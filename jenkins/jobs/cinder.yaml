- builder:
    name: apply-workarounds-post-stack-cinder
    builders:
        - shell: |
            #!/bin/bash -x
            phase="apply-workarounds-post-stack-cinder"
- builder:
    name: apply-workarounds-post-stack-Cinder-ISER-ISCSI
    builders:
        - shell: |
            #!/bin/bash -x
            phase="apply-workarounds-post-stack-cinder"
            sudo systemctl restart tgtd.service

- builder:
    name: apply-workarounds-pre-stack-cinder
    builders:
        - shell: |
            #!/bin/bash -x
            phase="apply-workarounds-pre-stack-cinder"
            sudo modprobe -r ib_isert 2>&1|tee > /dev/null
            sudo modprobe -r ib_iser 2>&1|tee > /dev/null
            sudo modprobe ib_isert 2>&1|tee > /dev/null
            sudo modprobe ib_iser 2>&1|tee > /dev/null

            if [ ! -f /usr/sbin/tgtd ]; then
                sudo yum install -y scsi-target-utils
                sudo systemctl enable tgtd
                sudo systemctl start tgtd
                sudo systemctl status tgtd
            fi
            sudo cat /etc/tgt/tgtd.conf | grep '/opt/stack/data/cinder/volumes/';
            if [ $? -ne 0 ];then
                sudo sh -c  "echo 'include /opt/stack/data/cinder/volumes/*'>>/etc/tgt/tgtd.conf"
            fi

- builder:
    name: apply-workarounds-pre-stack-Cinder-ISER-ISCSI
    builders:
        - shell: |
            #!/bin/bash -x
            phase="apply-workarounds-pre-stack-Cinder-ISER-ISCSI"
            sudo systemctl start tgtd
            sudo systemctl status tgtd

- builder:
    name: apply-workarounds-pre-stack-Cinder-ISER-LIO
    builders:
        - shell: |
            #!/bin/bash -x
            phase="apply-workarounds-pre-stack-Cinder-ISER-LIO"
            sudo systemctl stop tgtd
            exit 0

- builder:
    name: configure-devstack-cinder
    builders:
        - shell: |
            #!/bin/bash -ex
            phase="configure-devstack-Cinder-$CINDER_PROTOCOL"
            echo "STARTED: ############## $phase  ###################"

            i=1
            export ip1=1.1.1.1
            export ip2=2.2.2.2

            for pci in $(lspci |grep $HCA | grep -v Virtual | awk '{print $1}');do
                for p in $(ls -lr /sys/class/net/|grep $pci | awk '{print $9}');do
                    sudo ifconfig $p $i.$i.$i.$i/24 up
                    let i=i+1
                done
            done

            if [[ -n $ZUUL_PROJECT ]]; then
              project=$(echo $ZUUL_PROJECT | cut -d'/' -f2)
              refspec=$(echo ${ZUUL_CHANGES##*^} | rev|cut -d':' -f1|rev)
              project=${project//-/_}
              export ${project^^}_BRANCH=$refspec
            fi

            cat > $WORKSPACE/devstack/local.conf <<EOF
            [[local|localrc]]
            DOWNLOAD_DEFAULT_IMAGES=True
            ADMIN_PASSWORD=password
            MYSQL_PASSWORD=password
            RABBIT_PASSWORD=password
            SERVICE_PASSWORD=password
            SERVICE_TOKEN=servicetoken
            FORCE=yes
            HOST_IP=$(hostname -I | awk '{print $1}')

            RECLONE=yes
            LOG_COLOR=False
            PIP_UPGRADE=False
            LOGDIR=${LOGDIR:-/opt/stack/logs}
            LOGFILE=$LOGDIR/stack.sh.log
            LIBS_FROM_GIT=os-brick

            # Cinder
            VOLUME_GROUP_NAME="stack-volumes"
            VOLUME_NAME_PREFIX="volume-"
            VOLUME_BACKING_FILE_SIZE=10250M

            enable_service = q-svc q-agt q-dhcp q-l3 q-meta neutron tempest
            disable_service = horizon dstat n-net

            ## Neutron options
            Q_USE_SECGROUP=True

            # Neutron ML2 with OpenVSwitch
            NEUTRON_CREATE_INITIAL_NETWORKS=True
            Q_PLUGIN=ml2
            Q_AGENT=openvswitch
            Q_ML2_TENANT_NETWORK_TYPE=vxlan
            Q_L3_ENABLED=True

            PHYSICAL_NETWORK=default

            # Required for l3-agent to connect to external-network-bridge
            PUBLIC_BRIDGE=br-ex
            OVS_BRIDGE_MAPPINGS=public:br-ex

            [[post-config|/etc/cinder/cinder.conf]]
            [DEFAULT]
            enabled_backends=lvmdriver-1,backend1
            target_helper=$CINDER_PROTOCOL

            [lvmdriver-1]
            target_helper = $CINDER_PROTOCOL
            target_protocol = iser
            target_ip_address = $ip1
            lvm_type = default
            volume_group = stack-volumes-lvmdriver-1
            volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
            volume_backend_name = lvmdriver-1

            [backend1]
            target_helper = $CINDER_PROTOCOL
            target_ip_address = $ip2
            target_protocol = iser
            lvm_type = default
            volume_group = stack-volumes-lvmdriver-1
            volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
            volume_backend_name = backend1

            [[test-config|/opt/stack/tempest/etc/tempest.conf]]
            [volume]
            backend_names = lvmdriver-1,backend1
            [volume-feature-enabled]
            multi_backend = True
            [compute]
            build_timeout = 300
            [validation]
            ssh_timeout = 300
            EOF
            echo "FINISHED: ############## $phase  ###################"

- project:
    name: Cinder-ISER-ISCSI
    github-org: openstack-dev
    node: CINDER
    concurrent: true
    jobs:
        - 'Cinder-ISER-ISCSI'

- project:
    name: Cinder-ISER-LIO
    github-org: openstack-dev
    node: CINDER
    concurrent: true
    jobs:
        - 'Cinder-ISER-LIO'


- job-template:
    name: 'Cinder-ISER-ISCSI'
    node: '{node}'
    concurrent: true
    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            HCA=MT277
            IMAGE_SERVER=13.74.249.42
            PATH=$PATH:/usr/sbin
            CINDER_PROTOCOL=tgtadm
            GIT_BASE=https://review.opendev.org
      - check-environment
      - mlnx-project-config
      - clean-environment
      - clone-devstack
      - apply-workarounds-pre-stack
      - configure-devstack-cinder
      - apply-workarounds-pre-stack-cinder
      - apply-workarounds-pre-stack-{name}
      - run-stacksh # Running Devstack
      - apply-workarounds-post-stack-cinder
      - apply-workarounds-post-stack-{name}
      - run-tests-attach-volume
      - run-tests-cinder
      - produce-readme-file
    properties:
      - build-discarder:
          days-to-keep: 70
          num-to-keep: 300
          artifact-days-to-keep: 70
          artifact-num-to-keep: 500
    publishers:
      - email-ext:
          recipients: mlnx-openstack-ci@dev.mellanox.co.il
          subject: cinder job is being failed, please debug
          failure: true
      - upload-console-log
    wrappers:
      - timeout:
          timeout: 320
          fail: true


- job-template:
    name: 'Cinder-ISER-LIO'
    node: '{node}'
    concurrent: true
    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            HCA=MT277
            IMAGE_SERVER=13.74.249.42
            PATH=$PATH:/usr/sbin
            CINDER_PROTOCOL=lioadm
            GIT_BASE=https://review.opendev.org
      - check-environment
      - mlnx-project-config
      - clean-environment
      - clone-devstack
      - apply-workarounds-pre-stack
      - configure-devstack-cinder
      - apply-workarounds-pre-stack-{name}
      - run-stacksh # Running Devstack
      - apply-workarounds-post-stack-cinder
      - run-tests-attach-volume
      - run-tests-cinder
      - produce-readme-file
    properties:
      - build-discarder:
          days-to-keep: 70
          num-to-keep: 300
          artifact-days-to-keep: 70
          artifact-num-to-keep: 500
    publishers:
      - email-ext:
          recipients: mlnx-openstack-ci@dev.mellanox.co.il
          subject: cinder job is being failed, please debug
          failure: true
      - upload-console-log
    wrappers:
      - timeout:
          timeout: 320
          fail: true



- builder:
    name: run-tests-cinder
    builders:
      - shell: |
                #!/bin/bash +ex
                echo "============ Starting tempest tests ====================="
                tests=(
                       #tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes
                       #tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes.test_encrypted_cinder
                       tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes.test_encrypted_cinder_volumes_cryptsetup
                       tempest.scenario.test_minimum_basic.TestMinimumBasicScenario
                       tempest.scenario.test_snapshot_pattern.TestSnapshotPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2
                       tempest.scenario.test_stamp_pattern.TestStampPattern
                       tempest.api.volume.admin.test_multi_backend.VolumeMultiBackendTest
                       tempest.api.volume.admin.test_volume_types_extra_specs_negative
                )
                tempest_cmd="stestr"
                #[ "$ZUUL_BRANCH" ] && [[ $ZUUL_BRANCH == 'stable/pike' ]] && tempest_cmd="testr"
                cd /opt/stack/tempest
                #$tempest_cmd init
                stestr init
                #$tempest_cmd stestr list ${tests[@]}
                virtualenv virt --no-site-packages
                . virt/bin/activate
                virt/bin/pip install -U -r requirements.txt
                #$tempest_cmd run ${tests[@]}
                stestr run ${tests[@]}
                test_pass=$?
                deactivate

                if [[ $test_pass -ne 0 ]]; then
                    echo "FINISHED with ERROR: ############## $phase  ###################"
                    exit 1
                fi
