- builder:
    name: apply-workarounds-pre-stack-asap-vlan
    builders:
       - shell: |
            #!/bin/bash -ex
            phase="APPLY-WORKAROUNDS-PRE-VLAN"
            echo "STARTED: ############## $phase  ###################"

            sudo ovs-dpctl del-dp ovs-system 2>&1|tee
            sudo modprobe -r openvswitch 2>&1|tee > /dev/null
            sudo yum install mariadb-server -y


- builder:
    name: install-missing-rpms
    builders:
        - shell: |
            #!/bin/bash -x
            sudo yum install -y ethtool xterm.x86_64 xorg-x11-xauth.x86_64 xorg-x11-xinit.x86_64 xorg-x11-fonts-ISO8859-1-100dpi.noarch xorg-x11-font-utils.x86_64 tigervnc-server.x86_64 xorg-x11-fonts-Type1.noarch ghostscript.x86_64 tigervnc gnupg


- builder:
    name: eswitch-configure
    builders:
        - shell: |
            #!/bin/bash -x

            status=0
            pci=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}')
            pf=$(ls -l /sys/class/net/| grep $pci|awk '{print $9}'| head -n1)
            echo "pci=$pci pf=$pf HCA=$HCA"

            NUM_VFS=4
            sudo sh -c "echo 0 > /sys/class/net/$pf/device/sriov_numvfs"
            sudo sh -c "echo 4 > /sys/class/net/$pf/device/sriov_numvfs"
            for vf in $(lspci |grep Mell|grep Virtual| awk '{print $1}'); do
                 sudo sh -c "echo 0000:$vf > /sys/bus/pci/drivers/mlx5_core/unbind"
            done

            sudo devlink dev eswitch set pci/0000:$pci mode switchdev
            sudo devlink dev eswitch show pci/0000:$pci

            for vf in $(lspci |grep Mell|grep Virtual| awk '{print $1}'); do
                 sudo sh -c "echo 0000:$vf > /sys/bus/pci/drivers/mlx5_core/bind"
            done

            for i in $(ip link |grep -v UP |awk '{print $2}' | egrep ':$'|cut -d':' -f1|sort -r)
            do
               sudo ip link set $i up
               sleep 5
               sudo ip link set $i up
            done

            exit 0

            for pci in $(lspci |grep Mell|grep Virtual|grep -v ConnectX-3  | awk '{print $1}'); do
                sudo sh -c "echo  0000:${pci} > /sys/bus/pci/drivers/mlx5_core/unbind 2>&1|tee > /dev/null"
                sleep 1
            done

            for pci in $(lspci |grep Mell|grep -v Virtual|grep -v ConnectX-3  | awk '{print $1}'); do
                sudo sh -c "echo  0000:${pci} > /sys/bus/pci/drivers/mlx5_core/unbind 2>&1|tee > /dev/null"
                sudo sh -c "echo  0000:${pci} > /sys/bus/pci/drivers/mlx5_core/bind 2>&1|tee > /dev/null"

                sudo devlink dev eswitch set pci/0000:${pci} mode switchdev
                sudo ethtool -K $pf hw-tc-offload on

                sudo devlink dev eswitch show pci/0000:${pci}
                sleep 3
            done
            for i in $(ip link |grep -v UP |awk '{print $2}' | egrep ':$'|cut -d':' -f1|sort -r)
            do
               sudo ip link set $i up
               sleep 5
               sudo ip link set $i up
            done


- builder:
    name: apply-workarounds-post-stack-asap-vlan
    builders:
        - shell: |
            #!/bin/bash -xE
            phase="APPLY-WORKAROUNDS-POST"
            echo "STARTED: ############## $phase  ###################"
            echo "Stop iptables and network manager services"
            sudo systemctl stop iptables.service

- builder:
    name: configure-devstack-local-conf-offload
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK"
          echo "STARTED: ############## $phase  ###################"

          export pci=$(lspci |grep Mell|egrep "$HCA" |head -n1|awk '{print $1}'|  sed s/\.0\$//g)
          export pf=$(ls -l /sys/class/net/| grep $pci|awk '{print $9}'| head -n1)
          echo "pci=$pci, pf=$pf"

          cat >> $WORKSPACE/devstack/local.conf <<EOF
          # configure-devstack-local-conf-offload
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          # Neutron
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
          enable_plugin os-vif ${GIT_BASE}/openstack/os-vif $ZUUL_BRANCH

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"$pci"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          EOF

          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-local-conf-tempest-offload
    builders:
      - shell: |
          #!/bin/bash -ex

          cat >> $WORKSPACE/devstack/local.conf <<EOF
          # configure-devstack-local-conf-tempest-offload
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          port_profile = capabilities:[switchdev]
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network
          [compute-feature-enabled]
          suspend=false
          resize=false
          [auth]
          tempest_roles = Admin
          EOF


- builder:
    name: configure-devstack-OVS_HW_offload_old
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK"
          echo "STARTED: ############## $phase  ###################"

          export pci=$(lspci |grep Mell|egrep "$HCA" |head -n1|awk '{print $1}'|  sed s/\.0\$//g)
          export pf=$(ls -l /sys/class/net/| grep $pci|awk '{print $9}'| head -n1)
          echo "pci=$pci, pf=$pf"

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          LIBS_FROM_GIT=python-neutronclient
          SERVICE_TOKEN=servicetoken
          IDENTITY_API_VERSION=3
          HOST_IP=$(hostname -I | awk '{print $1}')
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          FORCE=yes

          LIBS_FROM_GIT=os-vif,neutron-lib
          OVS_BRANCH=v2.11.0
          Q_BUILD_OVS_FROM_GIT=True

          PUBLIC_INTERFACE=$pf
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan,flat
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PUBLIC_INTERFACE=$pf
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          OVS_BRIDGE_MAPPINGS=default:br-${PUBLIC_INTERFACE},public:br-ex
          # Services
          disable_service horizon h-eng h-api h-api-cfn h-api-cw etcd3 dstat
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta n-novnc n-xvnc n-cpu placement-api tempest

          enable_plugin neutron ${GIT_BASE}openstack/neutron $ZUUL_BRANCH
          enable_plugin os-vif ${GIT_BASE}/openstack/os-vif $ZUUL_BRANCH

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"$pci"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          port_profile = capabilities:[switchdev]
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network
          [compute-feature-enabled]
          suspend=false
          resize=false
          [auth]
          tempest_roles = Admin
          EOF
          echo "FINISHED: ############## $phase  ###################"

- project:
    name: VLAN-ASAP-Configure
    node: OFFLOAD
    jobs:
      - 'VLAN-ASAP-Configure'

- project:
    name: ASAP-Update-kernel
    node: OFFLOAD
    jobs:
      - 'ASAP-Update-kernel'


- job-template:
    name: 'VLAN-ASAP-Configure'
    node: '{node}'
    concurrent: true
    parameters:
    builders:
       - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/../ASAP-Controller/ci-artifacts/logs
            HCA=MT277|MT278
            PATH=$PATH:/usr/sbin
            RELEASE=latest
       - eswitch-configure
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 200
          artifact-days-to-keep: 60
          artifact-num-to-keep: 200

- project:
    name: 'OVS_HW_offload'
    node: OFFLOAD
    jobs:
      - 'OVS_HW_offload'
      - 'OVS_HW_offload_Neutron'

- job-template:
    name: 'OVS_HW_offload_Neutron'
    node: '{node}'
    concurrent: true
    parameters:
      - bool:
          name: UNSTACK_ON_JOB_FINISH
          default: true
          description: "Unstack devstack when job is finished"

    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            IMAGE_SERVER=13.74.249.42
            HCA=MT277|MT278
            PATH=$PATH:/usr/sbin
            GIT_BASE=https://review.opendev.org
      - check-environment
      - mlnx-project-config
      - clean-environment
      - eswitch-configure
      - clone-devstack
      - apply-workarounds-pre-stack-asap-vlan
      - configure-devstack-local-conf
      - configure-devstack-local-conf-neutron-common
      - configure-devstack-local-conf-offload
      - configure-devstack-local-conf-tempest-offload
      - run-stacksh
      - apply-workarounds-post-stack
      - apply-workarounds-post-stack-asap-vlan
      - run-tests-network-basic-advanced
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 200
          artifact-days-to-keep: 60
          artifact-num-to-keep: 200
    publishers:
      - upload-console-log-mn #This line must be the last one


- job-template:
    name: 'OVS_HW_offload'
    node: '{node}'
    concurrent: true
    parameters:
      - bool:
          name: UNSTACK_ON_JOB_FINISH
          default: true
          description: "Unstack devstack when job is finished"
    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            IMAGE_SERVER=13.74.249.42
            HCA=MT277|MT278
            PATH=$PATH:/usr/sbin
            GIT_BASE=https://review.opendev.org
      - check-environment
      - mlnx-project-config
      - clean-environment
      - eswitch-configure
      - clone-devstack
      - apply-workarounds-pre-stack-asap-vlan
      - configure-devstack-local-conf
      - configure-devstack-local-conf-neutron-common
      - configure-devstack-local-conf-offload
      - configure-devstack-local-conf-tempest-offload
      - run-stacksh
      - apply-workarounds-post-stack
      - apply-workarounds-post-stack-asap-vlan
      - run-tests-network-basic-advanced
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 200
          artifact-days-to-keep: 60
          artifact-num-to-keep: 200
    publishers:
      - upload-console-log-mn #This line must be the last one

- job-template:
    name: 'ASAP-Update-kernel'
    node: '{node}'
    concurrent: true
    parameters:
    builders:
       - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/../ASAP-Controller/ci-artifacts/logs
            HCA=MT277|MT278
            PATH=$PATH:/usr/sbin
            RELEASE_DIR=/jenkins/ASAP
            RELEASE=ASAP2_DIRECT-4.0-1
       - asap-update-kernel
       - install-missing-rpms
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 200
          artifact-days-to-keep: 60
          artifact-num-to-keep: 200

- builder:
    name: asap-update-kernel
    builders:
        - shell: |
            #!/bin/bash -xe

            if [ ! -e "$RELEASE_DIR/$RELEASE" ]; then
                echo "Cannot find release $RELEASE_DIR/$RELEASE"
                exit 1
            fi

            echo "Release: $RELEASE"
            KERNEL=`ls -1 $RELEASE_DIR/$RELEASE/kernel-[0-9].*.x86_64.rpm`
            KERNEL_HEADERS=`ls -1 $RELEASE_DIR/$RELEASE/kernel-headers-[0-9].*.x86_64.rpm`
            echo "Kernel $KERNEL"
            echo "Kernel headers $KERNEL_HEADERS"

            if [ "$KERNEL" == "" ]; then
                    echo "Cannot find kernel"
                    exit 1
            fi

            sleep 3

            pushd $RELEASE_DIR/$RELEASE/RPMS/
            sudo rpm -Uvh --force $(find . |egrep "kernel|iproute" |egrep -v "devel|src|debug|doc")
            popd

            vmlinuz=`rpm -qlp $KERNEL | grep -m1 ^/boot/vmlinuz-`
            initramfs=/boot/initramfs-${vmlinuz:14}.img

            echo "vmlinuz $vmlinuz"
            echo "initramfs $initramfs"

            if [ ! -f $vmlinuz ]; then
                echo "Cannot find $vmlinuz"
                exit 1
            fi

            if [ ! -f $initramfs ]; then
                echo "Cannot find $initramfs"
                exit 1
            fi

            vmlinuz=${vmlinuz:6}
            initramfs=${initramfs:6}

            vmlinuz=$(echo $vmlinuz |cut -d'/' -f3)
            initramfs=$(echo $initramfs |cut -d'/' -f3)

            grub_file="/boot/grub/grub.conf"

            export default=$(cat /boot/grub/grub.conf|grep title|wc -l)

            sudo sh -c "echo '' >> $grub_file"
            sudo sh -c "echo \"title Fedora OVS $vmlinuz\" >> $grub_file"
            sudo sh -c "echo \"root (hd0,0)\" >> $grub_file"
            sudo sh -c "echo \"kernel /$vmlinuz root=/dev/sda2 console=tty0 console=ttyS0,115200n8 rhgb intel_iommu=on\" >> $grub_file"
            sudo sh -c "echo \"initrd /$initramfs\" >> $grub_file"

            sudo sed -i s"/default [0-9]/default $default/g" $grub_file
            sudo cat $grub_file

            echo "Rebooting"
            cat > /tmp/reboot.sh <<EOF
            sleep 20
            sudo shutdown -r now
            EOF
            sudo timedatectl set-timezone 'Asia/Jerusalem'
            sleep 120
            BUILD_ID=dontKillMe nohup bash /tmp/reboot.sh &
            exit 0

- builder:
    name: run-tests-network-basic-advanced
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NETWORK-ADVANCED"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_basic_ops
            )
            pushd /opt/stack/tempest

            stestr init
            stestr list ${tests[@]}

            virtualenv virt --no-site-packages
            . virt/bin/activate
            test_pass=0
            virt/bin/pip install -U -r requirements.txt
            for test in $(stestr list ${tests[@]} | cut -d'[' -f1); do
               stestr run $test
               let test_pass=test_pass+$?
               sleep 2
            done
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"
