- project:
    name: KUBERNETES_INSTALL
    node: master
    jobs:
      - 'KUBERNETES_INSTALL'

- job-template:
    name: 'KUBERNETES_INSTALL'
    node: '{node}'
    concurrent: false
    parameters:
      - string:
          name: NODE_NAME
          default: None

    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            PATH=$PATH:/usr/sbin
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            IMAGE_SERVER=$EXT_SERVER
            PATH=$PATH:/usr/sbin
            GOROOT=/usr/local/go
            GOPATH=$GOROOT/go
      - check-host
      - install-go
      #- install-docker
      - install-kubernetes
      #- produce-readme-file
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 100
          artifact-days-to-keep: 60
          artifact-num-to-keep: 100
    publishers:
      - email-ext:
          recipients: lennyb@mellanox.com
          subject: Failed Mellanox CI {name}
          failure: true
          body: "Hello, my dear friend,\nunfortunately we have some issues in CI,\nplease, take a beer and lets take a look\n\n$DEFAULT_CONTENT\nhttp://$EXT_SERVER/$LOG_PATH/\nhttp://$EXT_SERVER/$JOB_NAME_$BUILD_NUMBER"
      #- upload-console-log #This line must be the last one


- builder:
    name: check-host
    builders:
        - shell: |
            #!/bin/bash -ex
            whoami
            file=/tmp/check_host.sh
            cat > $file  <<EOF
            hostname

            EOF

            sshpass -f /etc/passwrd scp $file root@$NODE_NAME:/tmp

            sshpass -f /etc/passwrd ssh root@$NODE_NAME bash -ex $file
            sshpass -f /etc/passwrd ssh root@$NODE_NAME rm -f $file

            GOROOT=/usr/local/go
            GOPATH=$HOME/go
            PATH=$GOPATH/bin:$GOROOT/bin:$GOPATH/src/k8s.io/kubernetes/third_party/etcd:$PATH



- builder:
    name: install-go
    builders:
        - shell: |
            #!/bin/bash -x
            sshpass -f /etc/passwrd ssh root@$NODE_NAME go version
            if [ $? -eq 0 ]; then
                echo "Go is already installed"
                exit 0
            fi
            file=/tmp/install_go.sh
            cat > $file  <<EOF

            cd /tmp
            yum install wget -y
            wget https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.11.4.linux-amd64.tar.gz
            rm -f go1.8.3.linux-amd64.tar.gz
            EOF
            sshpass -f /etc/passwrd scp $file root@$NODE_NAME:/$file
            sshpass -f /etc/passwrd ssh root@$NODE_NAME bash -ex $file
            sshpass -f /etc/passwrd ssh root@$NODE_NAME cat /root/.bashrc |grep GOROOT
            if [ $? -ne 0 ];then
                sshpass -f /etc/passwrd ssh root@$NODE_NAME echo 'export GOROOT=/usr/local/go >> /root/.bashrc'
                sshpass -f /etc/passwrd ssh root@$NODE_NAME echo 'export GOPATH=$GOROOT/go >> /root/.bashrc'
                sshpass -f /etc/passwrd ssh root@$NODE_NAME echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$GOPATH/src/k8s.io/kubernetes/third_party/etcd:$PATH >> /root/.bashrc'
                #sshpass -f /etc/passwrd ssh root@$NODE_NAME echo 'export PATH=$PATH:/usr/local/go/bin >> root/.bashrc'
            fi


- builder:
    name: install-docker
    builders:
        - shell: |
            #!/bin/bash -x

            sshpass -f /etc/passwrd ssh root@$NODE_NAME docker --version
            if [ $? -eq 0 ]; then
                echo "Docker is already installed"
                exit 0
            fi
            sshpass -f /etc/passwrd ssh root@$NODE_NAME cat /etc/redhat-release
            if [ $? -eq 0 ]; then
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum install -y yum-utils device-mapper-persistent-data lvm2
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum-config-manager --enable docker-ce-edge
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum-config-manager --enable docker-ce-testing
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum makecache fast
                sshpass -f /etc/passwrd ssh root@$NODE_NAME yum -y install --setopt=obsoletes=0 docker-ce-17.03.2.ce-1.el7.centos.x86_64 docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch
            else
                echo "Ubuntu not supported yet. Please ask Lenny"
            fi

- builder:
    name: install-kubernetes
    builders:
        - shell: |
            #!/bin/bash -x
            sshpass -f /etc/passwrd ssh root@$NODE_NAME rm -rf /tmp/kubernetes
            sshpass -f /etc/passwrd ssh root@$NODE_NAME git clone https://github.com/kubernetes/kubernetes.git /tmp/kubernetes
            sshpass -f /etc/passwrd ssh root@$NODE_NAME /tmp/kubernetes/hack/install-etcd.sh
            sshpass -f /etc/passwrd ssh root@$NODE_NAME /tmp/kubernetes/hack/local-up-cluster.sh
            sshpass -f /etc/passwrd ssh root@$NODE_NAME go get -d k8s.io/kubernetes
            sshpass -f /etc/passwrd ssh root@$NODE_NAME \cp -r /tmp/kubernetes/third_party/etcd* $GOPATH/src/k8s.io/kubernetes/third_party/
            sshpass -f /etc/passwrd ssh root@$NODE_NAME go get -u github.com/tools/godep
            sshpass -f /etc/passwrd ssh root@$NODE_NAME /tmp/kubernetes/
            sshpass -f /etc/passwrd ssh root@$NODE_NAME godep version
            status=$?
            sshpass -f /etc/passwrd ssh root@$NODE_NAME rm -rf /tmp/kubernetes
            exit $status

