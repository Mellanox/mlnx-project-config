- builder:
    name: check-environment
    builders:
        - shell: |
            #!/bin/bash -x
            status=0
            if [ `whoami` != 'stack' ]; then
                echo "Error, user is not stack"
                exit 1
            fi

            for i in `ibdev2netdev | awk '{print $5}'`; do
                sudo ifconfig $i up
            done

            sudo killall -9 radvd 2>&1|tee > /dev/null
            sudo losetup -a

            sudo cat /proc/cmdline |grep intel_iommu
            if [ -z $? ]; then
                echo "please add intel_iommu=on to /boot/grub/menu.lst or /etc/default/grub.cfg"
                exit 1
            fi
            env
            echo "Environment is OK"


- builder:
    name: collect-config-files
    builders:
        - shell: |
            #!/bin/bash -x
            phase="COLLECT CONFIG FILES"
            CI_ARTIFACTS=$LOGDIR/..
            mkdir -p $LOGDIR
            mkdir -p $CI_ARTIFACTS/etc
            mkdir -p $CI_ARTIFACTS/env

            pip --version
            pip freeze > $CI_ARTIFACTS/env/pip-freeze-env.txt
            [ -d /opt/stack/tempest/virt ] && . /opt/stack/tempest/virt/bin/activate && pip freeze > $CI_ARTIFACTS/env/pip-freeze-tempest.txt
            dpkg --list > $CI_ARTIFACTS/env/dpkg.txt
            sudo lvs > $CI_ARTIFACTS/env/lvs.txt
            env |sort > $CI_ARTIFACTS/env/environment.txt
            ifconfig > $CI_ARTIFACTS/env/ifconfig.txt
            sudo ovs-vsctl show > $CI_ARTIFACTS/env/ovs-vsctl.txt
            sudo lspci|grep Mellanox > $CI_ARTIFACTS/env/lspci.txt
            sudo uname -a > $CI_ARTIFACTS/env/uname.txt
            sudo cp /var/log/messages $CI_ARTIFACTS/env/
            sudo cp /var/log/syslog $CI_ARTIFACTS/env/
            sudo ps -ef > $CI_ARTIFACTS/env/procs.log
            ofed_info -s > $CI_ARTIFACTS/env/ofed.info
            sudo cp /etc/modprobe.d/ml* $CI_ARTIFACTS/etc/

            projects=(glance nova neutron eswitchd cinder keystone swift ironic ironic-inspector)
            for project in ${projects[@]}; do
                [ -d /etc/$project ] && cp -r /etc/$project $CI_ARTIFACTS/etc/
            done

            for d in $(find /opt/stack/ -maxdepth 1 -type d )
            do
                pushd $d > /dev/null
                x=$(git rev-parse HEAD 2>/dev/null)
                if [ $? -eq 0 ]; then
                    echo "$d $x" >> $CI_ARTIFACTS/env/stack_commits.txt
                fi
                popd > /dev/null
            done

            [ -d /opt/stack/tempest/.testrepository ] && cp -L -r /opt/stack/tempest/.testrepository $CI_ARTIFACTS/
            [ -f /opt/stack/tempest/tempest.log ] && cp -L /opt/stack/tempest/tempest.log $LOGDIR/
            [ -f /opt/stack/tempest/etc/tempest.conf ] && cp -L /opt/stack/tempest/etc/tempest.conf $CI_ARTIFACTS
            [ -f $WORKSPACE/devstack/local.conf ] && cp $WORKSPACE/devstack/local.conf $CI_ARTIFACTS
            [ -f /var/log/eswitchd/eswitchd.log ] && cp /var/log/eswitchd/eswitchd.log $LOGDIR

            sudo cp /var/log/libvirt/libvirtd.log $LOGDIR
            sudo cp -r /var/log/libvirt/qemu $LOGDIR

            exit 0


- builder:
    name: clean-environment
    builders:
        - delete-mac-nova
        - shell: |
            #!/bin/bash -x
            phase="CLEAN-ENVIRONMENT"
            echo "STARTED:############## $phase  ###################"
            echo "Deleting files older than 1 days from /tmp"
            sudo find /tmp -type f -mtime +1 -exec sudo rm -rf {} \;
            sudo find /tmp -type d -mtime +1 -exec sudo rm -rf {} \;
            echo "Deleting archives older than 10 days from /var/log"
            sudo rm -f `sudo find /var/log -name *.gz`

            rm -rf ~/.cache/*
            sudo rm -rf /root/.cache/pip
            sudo rm -rf /var/cache/apt
            sudo sh -c "> /var/log/conntrackd-stats.log"
            sudo sh -c "> /var/log/libvirt/libvirtd.log"
            sudo rm -f `sudo find /var/log -name *.log.*`

            sudo dpkg --configure -a
            sudo dmesg -c > /dev/null
            sudo sh -c "> /var/log/messages"

            [ -f /opt/stack/tempest/tempest.log ] && rm -f /opt/stack/tempest/tempest.log

            if [ ! -d $WORKSPACE/devstack ]; then
                git clone ssh://cloudx-17/images/openstack/devstack $WORKSPACE/devstack
            fi
            echo "Cleaning up possible remainings of previous builds."
            $WORKSPACE/devstack/clean.sh 2>&1|tee > /dev/null

            # Remove stack screens leftovers
            sudo screen -wipe
            screen -wipe

            # Check Cinder leftovers
            if [ $(echo $JOB_NAME|grep Cinder) ]; then
                echo "Cleaning Cinder left volumes"
                sudo pip install rtslib_fb
                sudo lvs
                sudo $WORKSPACE/mlnx-project-config/tools/cinder-rtstool clean
                sudo service tgt restart > /dev/null 2>&1 || true
            fi

            # https://redmine.mtl.com/issues/855578
            sudo cat /etc/issue | grep -i ubuntu
            if [ $? -eq 0 ]; then
                sudo apt-get purge -y libvirt*
                sudo rm -rf /var/lib/libvirt/
            fi

            sudo kill $(pgrep rabbitmq)
            sudo kill $(pgrep beam.smp)
            sudo kill $(ps -ef |grep swift | grep pyth | awk '{print $2}')
            sleep 5
            sudo kill -9 $(pgrep rabbitmq)
            sudo kill -9 $(pgrep beam.smp)
            sudo kill -9 $(ps -ef |grep swift | grep pyth | awk '{print $2}')
            sudo kill -9 $(ps -ef |grep neutron | grep -v grep | awk '{print $2}')
            kill -9 $(ps -ef |grep add_mac | grep -v grep | awk '{print $2}') 2>&1|tee > /dev/null

            [ -d /opt/stack/tempest/.testrepository ] && rm -rf /opt/stack/tempest/.testrepository

            cd $WORKSPACE/devstack
            for i in $(pip list|grep -v pip|awk '{print $1}'); do
                sudo pip uninstall $i -y;
            done

            sudo apt-get install python-docutils python-pkg-resources -y 2>&1|tee
            sudo yum install python-docutils python-pkg-resources -y 2>&1|tee
            sudo pip install pbr
            sudo pip install six
            sudo pip install jinja2
            sudo pip install docutils
            sudo pip install oslo.privsep
            sudo yum install python-requests rabbitmq-server -y

            [ -d $WORKSPACE/ci-artifacts ] && rm -rf $WORKSPACE/ci-artifacts
            if [[ -n $ZUUL_PROJECT ]]; then
                project=$(echo $ZUUL_PROJECT | cut -d'/' -f2)
                [ -d /opt/stack/$project] && rm -rf /opt/stack/$project
            fi

            sudo rm -f /var/log/apache2/keystone*
            sudo rm -rf /usr/lib/python2.7/site-packages/tempest*

            #Cleaning semaphores"
            for sem in `ipcs -s | grep root|awk '{print $2}'`; do
                for pid in `ipcs -s -i $sem|grep pid -a1|tail -n1|awk '{print $NF}'`; do
                    [ ! -d /proc/$pid ] && sudo ipcrm -s $sem
                done
            done

            #echo killing all python procs
            retries=10
            delay=10
            ps -ef |grep /usr/bin/python |grep -v grep |grep -v ipoibd
            pid=$?
            while [[ $retries -gt 0 ]] && [[ $pid -eq 0 ]]; do
                sleep $delay
                for pid in `ps -ef |grep /usr/bin/python |grep -v grep |grep -v ipoibd |awk '{print $2}'`; do
                    sudo kill $pid
                done
                ps -ef |grep /usr/bin/python |grep -v grep
                pid=$?
                let retries=retries-1
            done

            echo "Check if ipoibd is running"
            ipoibd=`pgrep ipoibd`

            if [[ -n $ipoibd ]]; then
                echo "Restarting ipoibd"
                sudo /sbin/ipoibd -D eth_ipoib & 2>&1|tee > /dev/null
            fi

            sudo rm -rf /opt/stack
            env
            echo "FINISHED:############## $phase  ###################"

- builder:
    name: apply-workarounds-pre-stack
    builders:
        - shell: |
            #!/bin/bash -x
            phase="APPLY-WORKAROUNDS-PRE"
            echo "STARTED: ############## $phase  ###################"

            echo "Delete all Bridges"
            for br in `sudo ovs-vsctl list-br`; do
                sudo ovs-vsctl del-br $br
            done


- builder:
    name: apply-workarounds-post-stack
    builders:
        - shell: |
            #!/bin/bash -xE
            phase="APPLY-WORKAROUNDS-POST"
            echo "STARTED: ############## $phase  ###################"

            for i in `ibdev2netdev | awk '{print $5}'`; do
                sudo ifconfig $i up
            done
            for port in `ibdev2netdev |grep _0 | grep Up |awk '{print $5}'`; do
                if [ -z $port ]; then
                    echo "Error finding ipoib port"
                    echo "ibdev2netdev |grep _0 |grep Up |awk '{print $5}'"
                    exit 1
                else
                    sudo ovs-vsctl --may-exist add-port br-$port $port 2>&1|tee> /dev/null
                fi
            done

            sudo modprobe ib_isert 2>&1|tee > /dev/null
            sudo modprobe ib_iser 2>&1|tee > /dev/null


- builder:
    name: apply-workarounds-tempest
    builders:
        - shell: |
            #!/bin/bash -x
            phase="APPLY-WORKAROUNDS-POST-TEMPEST"
            echo "STARTED: ############## $phase  ###################"


- builder:
    name: apply-workarounds-post-stack-Ironic-IB
    builders:
        - shell: |
            #!/bin/bash -x
            phase="APPLY-WORKAROUNDS-POST-Ironic-IB"

            #update
            #/opt/stack/nova/nova/virt/ironic/client_wrapper.py
            #set IRONIC_API_VERSION = (1, 17)
            #/opt/stack/ironic/ironic/api/controllers/v1/versions.py
            #set MIN_VERSION_STRING = '1.17'


- builder:
    name: noop-run
    builders:
      - shell: |
          #!/bin/bash -ex
          env
          echo "Hello World from "$(hostname)


- builder:
    name: configure-devstack-Neutron-ML2-MLNX
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-MLNX"
          echo "STARTED: ############## $phase  ###################"
          if [ "$ZUUL_PROJECT" == "openstack/networking-mlnx" ]; then
              export NETWORKING_MLNX_BRANCH=`echo $ZUUL_CHANGES|rev|cut -d':' -f1|rev`
          else
              export NETWORKING_MLNX_BRANCH=$ZUUL_BRANCH
          fi

          ZUUL_BRANCH=${ZUUL_BRANCH:-'master'}
          #TODO add 'stable/ocata' for ocata
          if [ $ZUUL_BRANCH != 'master' ]; then
              export MLNX_DRIVER='mlnx'
              export PCI_WHITE_LIST="pci_"
          else
              export MLNX_DRIVER='mlnx_infiniband'
              export PCI_WHITE_LIST="[pci]
          "
          fi
          if [ $ZUUL_BRANCH == 'stable/mitaka' ]; then
              export OVS_WA="[ovs]
          of_interface=ovs-ofctl
          "
          fi
          echo "MLNX_DRIVER=$MLNX_DRIVER"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up| grep ib| awk '{print $5}'|tail -n1`
          export epioib_port=`ibdev2netdev  | grep ${HCA}_0 | grep Up| awk '{print $5}'|head -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port epioib_port=$epioib_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          cat > $WORKSPACE/devstack/local.conf  <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox-x86_64-disk-ib.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          epioib_port=$epioib_port
          NETWORKING_MLNX_BRANCH=${NETWORKING_MLNX_BRANCH:-\$ZUUL_BRANCH}
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=${MLNX_DRIVER},openvswitch
          Q_AGENT=openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:10
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$epioib_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth
          disable_service h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta
          enable_service eswitchd
          enable_service mlnx-agt mlnx_dnsmasq
          enable_plugin neutron_ml2_mlnx git://github.com/openstack/networking-mlnx ${NETWORKING_MLNX_BRANCH}
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          ${OVS_WA}
          [[post-extra|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          suspend=false
          resize=false
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          suspend=false
          resize=false
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2


          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Neutron-MACVTAP-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          echo $PATH
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          agent_required=True
          [ml2_sriov]
          supported_pci_vendor_devs=15b3:1014,15b3:1016
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          [compute-feature-enabled]
          resize=false
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          [compute-feature-enabled]
          resize=false
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Neutron-ML2-Sriov-CX5
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-Sriov-CX5"
          echo "STARTED: ############## $phase  ###################"
          echo $PATH
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=normal
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=normal
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Neutron-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          echo $PATH
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group,network,qos
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Ironic-IB
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Ironic-IB"
          echo "STARTED: ############## $phase  ###################"
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          #DOWNLOAD_DEFAULT_IMAGES=False
          #IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox-x86_64-disk-ib.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          DEFAULT_PASSWORD=password
          SWIFT_TEMPURL_KEY=password
          SWIFT_HASH=password
          SWIFT_ENABLE_TEMPURLS=True
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          RECLONE=yes
          USE_SCREEN=True
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False

          #mlnx_port=\`ibdev2netdev |grep Up |awk '{print $5}'|tail -n1\`
          #epioib_port=\`ibdev2netdev |grep Up |awk '{print $5}'|head -n1\`
          epioib_port=eth2
          #mlnx_dev=\`lspci |grep Mell|head -n1|awk '{print $1}' |  sed s/\.0\$//g\`

          PHYSICAL_INTERFACE=$epioib_port
          PHYSICAL_NETWORK=default
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$epioib_port

          disable_service n-net n-novnc horizon
          disable_service heat h-api h-api-cfn h-api-cw h-eng
          disable_service cinder c-sch c-api c-vol
          enable_service ironic ir-api ir-cond
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta
          enable_service s-proxy s-object s-container s-account
          enable_service s-proxy s-object s-container s-account
          enable_service tempest

          # microversion patch
          #enable_plugin ironic https://github.com/openstack/ironic refs/changes/58/260358/6

          #TEMPEST_BRANCH=refs/changes/07/292307/6

          NOVA_BRANCH=refs/changes/40/266540/11
          enable_plugin ironic https://github.com/openstack/ironic refs/changes/63/264263/24
          enable_plugin ironic-inspector https://github.com/openstack/ironic-inspector refs/changes/57/264257/22
          enable_plugin tempest https://github.com/openstack/tempest refs/changes/07/292307/6

          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan,flat
          Q_ML2_TENANT_NETWORK_TYPE=vlan

          ENABLE_TENANT_TUNNELS=False
          TENANT_VLAN_RANGE=2:100

          IRONIC_BAREMETAL_BASIC_OPS=True
          IRONIC_INSPECTOR_RAMDISK_ELEMENT=ironic-agent
          IRONIC_INSPECTOR_BUILD_RAMDISK=False
          VIRT_DRIVER=ironic
          IRONIC_DEPLOY_DRIVER=pxe_ssh
          IRONIC_VM_LOG_DIR=$LOGDIR/ironic-bm-logs
          DEFAULT_INSTANCE_TYPE=baremetal
          BUILD_TIMEOUT=600
          IRONIC_CALLBACK_TIMEOUT=600
          IRONIC_BUILD_DEPLOY_RAMDISK=False
          IRONIC_ENABLED_DRIVERS=fake,pxe_ssh,pxe_ipmitool,agent_ipmitool
          IRONIC_VM_EPHEMERAL_DISK=1
          VOLUME_BACKING_FILE_SIZE=1000
          FORCE_CONFIG_DRIVE=True
          IRONIC_VM_SPECS_RAM=1024
          IRONIC_VM_COUNT=1
          IRONIC_DEPLOY_DRIVER_ISCSI_WITH_IPA=True
          IRONIC_RAMDISK_TYPE=coreos
          IRONIC_IPXE_ENABLED=True

          IRONIC_CONDUCTOR_CLEAN_NODES=false
          IRONIC_CONDUCTOR_DEPLOY_CALLBACK_TIMEOUT=600

          IRONIC_INSPECTOR_MANAGE_FIREWALL=False
          IRONIC_VM_SSH_PORT=22

          SCREEN_LOGDIR=/opt/stack/logs/screen
          TEMPEST_ALLOW_TENANT_ISOLATION=False

          [[post-config||/etc/ironic-inspector/inspector.conf]]
          [DEFAULT]
          timeout=120
          [firewall]
          dnsmasq_interface = br-\$epioib_port
          manage_firewall = False

          [[post-config|/etc/neutron/dhcp_agent.ini]]
          [DEFAULT]
          dhcp_broadcast_reply=True

          [[post-config|/etc/ironic/ironic.conf]]
          [conductor]
          clean_nodes=false
          deploy_callback_timeout=600

          [[test-config|\$TEMPEST_CONFIG]]
          [auth]
          use_dynamic_credentials = True
          [baremetal]
          infrastructure_type = infiniband

          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Neutron-Networking-MLNX-ML2
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-Networking-MLNX-ML2"
          echo "STARTED: ############## $phase  ###################"
          if [ "$ZUUL_PROJECT" == "openstack/networking-mlnx" ]; then
              export NETWORKING_MLNX_BRANCH=`echo $ZUUL_CHANGES|rev|cut -d':' -f1|rev`
          else
              export NETWORKING_MLNX_BRANCH=$ZUUL_BRANCH
          fi

          ZUUL_BRANCH=${ZUUL_BRANCH:='master'}

          echo "NETWORKING_MLNX_BRANCH=$NETWORKING_MLNX_BRANCH"

          if [ "$ZUUL_BRANCH" != 'master' ]; then
              export MLNX_DRIVER='sdnmechdriver,mlnx'
              export PCI_WHITE_LIST="pci_"
          else
              export MLNX_DRIVER='mlnx_sdn_assist,mlnx_infiniband'
              export PCI_WHITE_LIST="[pci]
          "
          fi

          if [ $ZUUL_BRANCH == 'stable/mitaka' ]; then
              export OVS_WA="[ovs]
          of_interface=ovs-ofctl
          "
          fi
          echo "MLNX_DRIVER=$MLNX_DRIVER"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"|grep Up| awk '{print $5}'|tail -n1`
          export epioib_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1" |grep Up| awk '{print $5}'|head -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port epioib_port=$epioib_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox-x86_64-disk-ib.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          epioib_port=$epioib_port
          PUBLIC_INTERFACE=$epioib_port
          NETWORKING_MLNX_BRANCH=${NETWORKING_MLNX_BRANCH:-\$ZUUL_BRANCH}
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=${MLNX_DRIVER},openvswitch
          Q_AGENT=openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:10
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$epioib_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt
          enable_service eswitchd
          enable_service mlnx-agt mlnx_dnsmasq
          enable_plugin neutron_ml2_mlnx git://github.com/openstack/networking-mlnx ${NETWORKING_MLNX_BRANCH}
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [sdn]
          url = http://127.0.0.1/neo
          domain = cloudx
          username = admin
          password = admin
          ${OVS_WA}
          [[post-extra|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          resize=false
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          resize=false
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2

          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Nova-MACVTAP-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Nova-MACVTAP-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-"mlx5"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell| grep Virtual| grep "\-$mlx" |head -n1|awk '{print $1}' | cut -d'.' -f1`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi
          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          PIP_UPGRADE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron $NEUTRON_REPO $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          supported_pci_vendor_devs=15b3:1014,15b3:1016
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [compute-feature-enabled]
          resize=false
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [compute-feature-enabled]
          resize=false

          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Nova-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Nova-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi
          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron $NEUTRON_REPO $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct


          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Tempest-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Tempest-Sriov"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1" | grep Up|awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi
          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw
          disable_service n-xvnc n-novnc horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-qos q-sriov-agt
          enable_plugin neutron $NEUTRON_REPO $NEUTRON_BRANCH
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct

          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Nova-ML2-Sriov-Multinode-Compute
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Multinode-Compute"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep Up| grep "port 1" | awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
             export PCI_WHITE_LIST="pci_"
          fi
          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          env
          export CONTROLLER_NODE=${CONTROLLER_NODE:-"cloudx-27"}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          MULTI_HOST=1
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          SERVICE_HOST=$CONTROLLER_NODE
          MYSQL_HOST=$CONTROLLER_NODE
          RABBIT_HOST=$CONTROLLER_NODE
          Q_HOST=$CONTROLLER_NODE
          GLANCE_HOSTPORT=$CONTROLLER_NODE:9292
          NOVA_VNC_ENABLED=True
          NOVNCPROXY_URL="http://$CONTROLLER_NODE:6080/vnc_auto.html"
          VNCSERVER_LISTEN=\$HOST_IP
          VNCSERVER_PROXYCLIENT_ADDRESS=\$VNCSERVER_LISTEN
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          ENABLED_SERVICES=n-cpu,q-agt,n-api-meta,n-novnc,n-xvnc,q-qos,q-sriov-agt
          enable_service placement-api
          enable_plugin neutron $NEUTRON_REPO
          disable_service tempest n-cauth
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          allow_resize_to_same_host = False
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          $EXTENSION

          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Nova-ML2-Sriov-Multinode-Controller
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Multinode-Controller"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 |grep "port 1"|grep Up| awk '{print $5}'|tail -n1`
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi
          if [[ $ZUUL_BRANCH == "master" || -z "$ZUUL_BRANCH" ]]; then
              export EXTENSION="extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}"
              export PCI_WHITE_LIST="[pci]
          "
          else
              export PCI_WHITE_LIST="pci_"
          fi

          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          env
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/mellanox_eth.img,"
          MULTI_HOST=1
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          LIBS_FROM_GIT=python-neutronclient
          SERVICE_TOKEN=servicetoken
          IDENTITY_API_VERSION=3
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch,sriovnicswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service horizon h-eng h-api h-api-cfn h-api-cw
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta q-qos q-sriov-agt tempest n-novnc n-xvnc n-cpu placement-api
          enable_plugin neutron $NEUTRON_REPO
          USE_SCREEN=True
          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          ${PCI_WHITE_LIST}passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          supported_pci_vendor_devs = 15b3:1004,15b3:1014
          $EXTENSION
          [[post-extra|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          migrate=True
          [compute]
          min_compute_nodes=2
          [network]
          port_vnic_type=direct
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          migrate=True
          [compute]
          min_compute_nodes=2
          [network]
          port_vnic_type=direct

          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: mlnx-project-config
    builders:
       - shell: |
          #!/bin/bash -x
          phase="EXTERNAL-TESTING-CHECKOUT"
          echo "STARTED: ############## $phase  ###################"
          [ -d $WORKSPACE/mlnx-project-config ] && rm -rf $WORKSPACE/mlnx-project-config

          git clone ssh://cloudx-17/images/openstack/mlnx-project-config $WORKSPACE/mlnx-project-config
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-stacksh
    builders:
      - shell: |
          #!/bin/bash
          phase="RUN-STACKSH"
          echo "STARTED: ############## $phase  ###################"v
          if [[ -n $ZUUL_PROJECT ]]; then
              project=$(echo $ZUUL_PROJECT | cut -d'/' -f2)
              refspec=$(echo ${ZUUL_CHANGES##*^} | rev|cut -d':' -f1|rev)
              project=${project//-/_}
              export ${project^^}_BRANCH=$refspec
          fi

          export ESWITCHD_BRANCH="master"
          BUILD_ID=dontKillMe $WORKSPACE/devstack/stack.sh
          rc=$?

          if [[ $rc -ne 0 ]]; then
              echo "FINISHED with ERROR $rc: ############## $phase  ###################"
              exit $rc
          fi
          echo "############## Stack is up and running ###################"
          echo "FINISHED: ############## $phase  ###################"
          sleep 240
          exit 0

- builder:
    name: stop-stacksh
    builders:
      - shell: |
          #!/bin/bash -x
          phase="STOP-STACKSH"
          echo "STARTED: ############## $phase  ###################"

          #For latest Ubuntu
          #export FORCE=yes
          if [ -f $WORKSPACE/devstack/unstack.sh ];then
             $WORKSPACE/devstack/unstack.sh 2>&1|tee
          fi
          #sudo yum remove  openvswitch -y
          #sudo apt-get remove openvswitch-switch -y
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-API"
            echo "STARTED: ############## $phase  ###################"
            cd /opt/stack/tempest
            tests=ironic_tempest_plugin.tests.api
            testr list-tests ${tests[@]}
            #tox -eall ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-configure-Real-BM
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-configure-Real-BM"
            echo "STARTED: ############## $phase  ###################"
            test_pass=$?
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-run-Real-BM
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-run-Real-BM"
            echo "STARTED: ############## $phase  ###################"
            test_pass=$?
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"




- builder:
    name: run-tests-Neutron-ML2-MLNX
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NEUTRON-ML2-MLNX"
            echo "STARTED: ############## $phase  ###################"
            tests=(tempest.api.network.admin.test_dhcp
                tempest.api.network.admin.test_agent
                tempest.api.network.test_floating_ips
                tempest.api.network.test_networks
                tempest.api.network.test_extensions
                #tempest.scenario.test_network_basic_ops
                tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_preserve_preexisting_port
                #LNY TOFIX test_router_rescheduling works on old Ubuntu CI
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_router_rescheduling
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_router_admin_state
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.TestNetworkBasicOps.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.TestNetworkBasicOps.test_server_connectivity_reboot
            )
            cd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Neutron-ML2-Sriov-CX5-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Neutron-ML2-Sriov-CX5-API"
            echo "STARTED: ############## $phase  ###################"
            tests=(tempest.api.network
            )
            cd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Neutron-ML2-Sriov-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Neutron-ML2-Sriov-API"
            echo "STARTED: ############## $phase  ###################"
            tests=(tempest.api.network.admin.test_dhcp
                tempest.api.network.admin.test_agent
                tempest.api.network.test_floating_ips
                tempest.api.network.test_networks
                tempest.api.network.test_routers
                tempest.api.network.test_extensions
            )
            cd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-neutron
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Neutron"
            echo "STARTED: ############## $phase  ###################"
            cd /opt/stack/tempest
            test_list=/tmp/tempst_list_$$
            testr init
            testr list-tests neutron.tests | grep tempest|egrep -v "neutron.tests.tempest.api.test_extensions.ExtensionsTest|neutron.tests.tempest.scenario.test_qos.QoSTest" > $test_list
            testr run --load-list=$test_list
            test_pass=$?
            rm -f $test_list

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: run-tests-Neutron-Networking-MLNX-ML2
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NEUTRON-NETWORKING-MLNX-ML2"
            echo "STARTED: ############## $phase  ###################"
            tests=(tempest.api.network.admin.test_dhcp
                tempest.api.network.admin.test_agent
                tempest.api.network.test_floating_ips
                tempest.api.network.test_networks
                tempest.api.network.test_extensions
                #tempest.scenario.test_network_basic_ops
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_connectivity_between_vms_on_different_networks
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_network_basic_ops
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_router_rescheduling
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_router_admin_state
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_reboot
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_rebuild
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_resize
                )
            pushd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-network-basic
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NETWORK-BASIC"
            echo "STARTED: ############## $phase  ###################"
            pushd /opt/stack/tempest
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run tempest.scenario.test_network_basic_ops
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-sanity-check
    builders:
        - shell: |
            #!/bin/bash -ex
            phase="RUN-TESTS-SANITY"
            echo "STARTED: ############## $phase  ###################"
            neutron net-list
            cd /opt/stack/tempest
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            deactivate
            cd -


- builder:
    name: run-tests-network-advanced
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NETWORK-ADVANCED"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_reboot
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_resize
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_stop_start
            )
            pushd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-multinode
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-MULTINODE"
            [ -d /opt/stack/tempest/.testrepository ] && rm -rf /opt/stack/tempest/.testrepository
            echo "STARTED: ############## $phase  ###################"
            tests=(
                  #TOFIX tests fail unless nova sch is restarted. Seems that sch ignoring schedule_hints
                  tempest.scenario.test_server_multinode.TestServerMultinode.test_schedule_to_all_nodes
                  tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_migration_revert
                  tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_cold_migration
            )
            pushd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: run-tests-Nova-ML2-Sriov-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Nova-ML2-Sriov-API"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                tempest.api.compute.servers.test_server_personality
                tempest.api.compute.servers.test_virtual_interfaces_negative
                tempest.api.compute.servers.test_list_server_filters
                tempest.api.compute.servers.test_multiple_create_negative
                tempest.api.compute.servers.test_server_metadata
                tempest.api.compute.servers.test_attach_interfaces
                tempest.api.compute.servers.test_server_addresses_negative
                tempest.api.compute.servers.test_availability_zone
                tempest.api.compute.servers.test_server_group
                tempest.api.compute.servers.test_server_password
                tempest.api.compute.servers.test_create_server
                tempest.api.compute.servers.test_multiple_create
                tempest.api.compute.servers.test_servers_negative
                tempest.api.compute.servers.test_virtual_interfaces
                tempest.api.compute.servers.test_server_metadata_negative
                tempest.api.compute.servers.test_server_actions
                tempest.api.compute.servers.test_servers
                tempest.api.compute.servers.test_instance_actions
                tempest.api.compute.servers.test_server_addresses
                tempest.api.compute.servers.test_list_servers_negative
                tempest.api.compute.servers.test_instance_actions_negative
                tempest.api.compute.servers.test_disk_config
                tempest.api.compute.certificates.test_certificates
                tempest.api.compute.flavors.test_flavors_negative
                tempest.api.compute.flavors.test_flavors
                tempest.api.compute.test_authorization
                tempest.api.compute.volumes.test_volumes_negative
                tempest.api.compute.test_live_block_migration
                tempest.api.compute.images.test_image_metadata_negative
                tempest.api.compute.images.test_images_oneserver
                tempest.api.compute.images.test_image_metadata
                tempest.api.compute.images.test_list_image_filters_negative
                tempest.api.compute.images.test_images_oneserver_negative
                tempest.api.compute.images.test_images_negative
                tempest.api.compute.images.test_list_images
                tempest.api.compute.images.test_list_image_filters
                tempest.api.compute.images.test_images
                tempest.api.compute.admin.test_security_groups
                tempest.api.compute.admin.test_flavors_access_negative
                tempest.api.compute.admin.test_flavors_negative
                tempest.api.compute.admin.test_flavors_extra_specs
                tempest.api.compute.admin.test_flavors_extra_specs_negative
                tempest.api.compute.admin.test_simple_tenant_usage_negative
                tempest.api.compute.admin.test_availability_zone
                tempest.api.compute.admin.test_quotas_negative
                tempest.api.compute.admin.test_hosts_negative
                tempest.api.compute.admin.test_fixed_ips_negative
                tempest.api.compute.admin.test_fixed_ips
                tempest.api.compute.admin.test_hosts
                tempest.api.compute.admin.test_services_negative
                tempest.api.compute.admin.test_instance_usage_audit_log_negative
                tempest.api.compute.admin.test_availability_zone_negative
                tempest.api.compute.admin.test_aggregates
                tempest.api.compute.admin.test_aggregates_negative
                tempest.api.compute.admin.test_networks
                tempest.api.compute.admin.test_simple_tenant_usage
                tempest.api.compute.admin.test_servers_negative
                tempest.api.compute.admin.test_hypervisor
                tempest.api.compute.admin.test_servers
                tempest.api.compute.admin.test_quotas
                tempest.api.compute.admin.test_flavors_access
                tempest.api.compute.admin.test_floating_ips_bulk
                tempest.api.compute.admin.test_security_group_default_rules
                tempest.api.compute.admin.test_hypervisor_negative
                tempest.api.compute.admin.test_instance_usage_audit_log
                tempest.api.compute.admin.test_services
                tempest.api.compute.admin.test_baremetal_nodes
                tempest.api.compute.admin.test_migrations
                tempest.api.compute.admin.test_agents
                tempest.api.compute.admin.test_flavors
                tempest.api.compute.limits.test_absolute_limits_negative
                tempest.api.compute.limits.test_absolute_limits
                tempest.api.compute.test_extensions
                tempest.api.compute.test_live_block_migration_negative
                tempest.api.compute.floating_ips.test_list_floating_ips
                tempest.api.compute.floating_ips.test_floating_ips_actions
                tempest.api.compute.floating_ips.test_floating_ips_actions_negative
                tempest.api.compute.floating_ips.test_list_floating_ips_negative
                tempest.api.compute.floating_ips.base
                tempest.api.compute.test_networks
                tempest.api.compute.keypairs.test_keypairs_negative
                tempest.api.compute.keypairs.test_keypairs
                tempest.api.compute.test_quotas
                tempest.api.compute.test_tenant_networks
                tempest.api.compute.security_groups.base
            )
            tests=(
                tempest.api.compute.servers.test_server_actions.ServerActionsTestJSON.test_resize_server_confirm
                tempest.api.compute.servers.test_server_actions.ServerActionsTestJSON.test_resize_server_revert
                )

            pushd /opt/stack/tempest
            testr list-tests ${tests[@]}
            testr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            testr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: collect-artifacts
    builders:
      - shell: |
          #!/bin/bash -x
          #   /bin/bash -eEx
          phase="COLLECT-ARTIFACTS"
          echo "STARTED: ############## $phase  ###################"
          CI_ARTIFACTS=$(dirname ${LOGDIR})
          dmesg -T 2>&1|tee > $CI_ARTIFACTS/logs/dmesg.log
          echo "TGT Status"
          sudo service tgt status 2>&1 |tee

          tmp_subunit=/tmp/tempest_results_$$
          for results in '/opt/stack/neutron' '/opt/stack/tempest'; do
              testrepository=$results/.testrepository/0
              if [[ -f $testrepository ]]; then
                  pushd $results/.testrepository
                  for file in `find . -regex '.*[0-9][0-9]?'`
                      do cat $file >> $tmp_subunit
                  done
                  popd
              fi
          done
          if [ -f $tmp_subunit ]; then
              $WORKSPACE/mlnx-project-config/tools/subunit2html.py $tmp_subunit $CI_ARTIFACTS/testr_results.html
              rm -f $tmp_subunit
          fi
          sudo chown -R stack $CI_ARTIFACTS

          [ -d $WORKSPACE/mlnx-project-config ] && $WORKSPACE/mlnx-project-config/tools/analize.py $CI_ARTIFACTS/logs 2>&1|tee
          source=/tmp/ci-artifacts_$$
          rsync $CI_ARTIFACTS/* $source -a --copy-links -v 2>&1|tee > /dev/null
          rm -f $source/logs/*.log.* 2>&1|tee > /dev/null

          grep -rn Traceb $source/logs/*.log 2>&1|tee > $source/logs/exceptions.txt

          gzip -9 -r $source 2>&1|tee > /dev/null
          rm -rf $CI_ARTIFACTS 2>&1|tee
          cp -r $source $CI_ARTIFACTS
          chmod +r -R $CI_ARTIFACTS
          rm -rf $source 2>&1|tee

          # NOTE: this is based on the fact that all MultiNode nodes labled as SRIOV_MN_CONTROLLER
          # or SRIOV_MN_COMPUTE
          NODE_TYPE=`echo $NODE_LABELS |grep 'SRIOV_MN'|cut  -d' ' -f1|cut -d'_' -f3`

          UPLOAD_LOGPATH_TEMPEST=${LOG_PATH:-${JOB_NAME}/${BUILD_NUMBER}_${NODE_NAME}}
          UPLOAD_LOGPATH=${UPLOAD_LOGPATH_TEMPEST}/${NODE_TYPE}

          target=/var/www/html/${UPLOAD_LOGPATH}

          ssh $LOGSERVER mkdir -p ${target}

          scp -r $CI_ARTIFACTS/* $LOGSERVER:$target 2>&1 | tee > /dev/null
          # Copy tempest results
          scp -r $CI_ARTIFACTS/te* $LOGSERVER:/var/www/html/$UPLOAD_LOGPATH_TEMPEST  2>&1|tee > /dev/null

          ip=$(echo $LOGSERVER | cut -d'@' -f2)
          echo "Detailed logs: http://$ip/$UPLOAD_LOGPATH"

          if [ -f $CI_ARTIFACTS/testr_results.html.gz ]; then
              echo "Tempest results: http://$ip/$UPLOAD_LOGPATH/testr_results.html.gz"
              echo "Devstack configuration: http://$ip/$UPLOAD_LOGPATH/local.conf.gz"
          fi

          if [ ! -z "$LOG_PATH" ]; then
              REVIEW_PATH=`echo $UPLOAD_LOGPATH|cut -d'/' -f2`
              echo "https://review.openstack.org/#/c/$REVIEW_PATH"
          fi

          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: produce-readme-file
    builders:
      - shell: |
          #!/bin/bash -ex
          if [ ! -d $LOGDIR ];then
          mkdir -p $LOGDIR
          fi
          cat > $LOGDIR/README <<EOF
          Mellanox 3rd party CI
          ---------------------
          Job Name: $JOB_NAME
          Build started at `date --universal`

          Contact information:
          Email: lennyb@mellanox.com
          IRC: lennyb on #openstack-infra
          EOF

- builder:
    name: clone-devstack
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CLONE-DEVSTACK"
          echo "STARTED: ############## $phase  ###################"

          [ -d $WORKSPACE/devstack ] && sudo rm -rf $WORKSPACE/devstack

          git clone ssh://cloudx-17/images/openstack/devstack
          pushd $WORKSPACE/devstack

          ZUUL_BRANCH=${ZUUL_BRANCH:='master'}
          git fetch
          git checkout $ZUUL_BRANCH
          git pull

          #workaround remove old cloud.yaml to avoid keystone auth problems
          rm -rf ~/.config/openstack
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: add-mac-nova
    builders:
        - shell: |
            #!/bin/bash
            #Prepare  environment
            phase="ADD-MAC-NOVA"
            if [[ "$ZUUL_BRANCH" == "master" || -z "$ZUUL_BRANCH" ]]; then
                exit 0
            fi

            echo "STARTED: ############## $phase  ###################"
            WORKSPACE=${WORKSPACE:-$(dirname `readlink -f -- $0`)}
            echo "WORKSPACE=$WORKSPACE"

            source $WORKSPACE/devstack/openrc admin

            # Start script to add macs to default gateway
            echo "NOVA CI add macs"
            ADD_MAC='/tmp/add_mac.sh'
            HCA=${HCA:-"mlx4"}
            mlnx_port=`ibdev2netdev |grep $HCA|grep Up | awk '{print $5}' | head -n1`
            echo "Adding macs to $HCA:$mlnx_port"

            cat <<EOF > $ADD_MAC
            #!/bin/bash
            #This script adds MACs to the physical interface
            while [ 1 ]; do
                macs=\`neutron port-list |awk '{print \$5}' |grep fa |egrep -v "\"10.0|\"172."\`
                for mac in \$macs; do
                    sudo bridge fdb add \$mac dev $mlnx_port
                    done
                done
            EOF
            nohup bash $ADD_MAC 2>&1|tee > /dev/null &
            cp $ADD_MAC ${WORKSPACE}/
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: delete-mac-nova
    builders:
        - shell: |
            #!/bin/bash
            phase="DELETE_MAC_NOVA"
            echo "STARTED: ############## $phase  ###################"
            ADD_MAC='/tmp/add_mac.sh'
            HCA=${HCA:-"mlx4"}
            echo "NOVA CI clean macs"
            kill -9 $(ps -ef |grep add_mac | grep -v grep | awk '{print $2}') 2>&1|tee > /dev/null
            rm -f $ADD_MAC 2>&1|tee > /dev/null

            mlnx_port=`ibdev2netdev |grep $HCA|grep Up | awk '{print $5}' | head -n1`
            echo "Removing macs from $HCA:$mlnx_port"

            tmp_file="/tmp/del_macs_$$"
            sudo bridge fdb show |grep fa:16 | awk '{print "sudo bridge fdb del " $1 " dev " $3}' > $tmp_file
            bash -x $tmp_file 2>&1|tee > /dev/null
            rm -f $tmp_file
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Cinder-ISER-ISCSI
    builders:
      - shell: |
          #!/bin/bash +e
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 | grep "port 1"| grep Up| awk '{print $5}'|tail -n1`
          export epioib_port=`ibdev2netdev  | grep ${HCA}_0 | grep Up| awk '{print $5}'|head -n1`
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi

          cat > devstack/local.conf <<EOF
          [[local|localrc]]
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          SERVICE_TOKEN=servicetoken

          LIBS_FROM_GIT=os-brick
          RECLONE=yes
          LOG_COLOR=False
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          SCREEN_LOGDIR=\$LOGDIR/screen
          LOGDAYS=2

          disable_service n-net heat h-api h-api-cfn h-api-cw h-eng n-cauth q-lbaas
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta
          disable_service n-novnc n-xvnc horizon
          enable_service tempest
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          epioib_port=$epioib_port

          #Neutron Configuration
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
          Q_USE_DEBUG_COMMAND=False
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          PHYSICAL_INTERFACE=$mlnx_port
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          Q_USE_SECGROUP=True
          PHYSICAL_NETWORK=default

          SWIFT_HASH=password
          SWIFT_REPLICAS=1
          SWIFT_DATA_DIR=$DEST/data

          [[post-config|/etc/cinder/cinder.conf]]
          [DEFAULT]
          enabled_backends = lvmdriver-1, backend1, backend2

          [backend1]
          iscsi_ip_address=1.1.1.1
          iscsi_helper=tgtadm
          iscsi_protocol = iser
          iscsi_port = 3260
          volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_backend_name = backend1
          volume_group = stack-volumes-lvmdriver-1

          [backend2]
          iscsi_ip_address=1.1.1.1
          iscsi_helper=tgtadm
          iscsi_protocol = iser
          iscsi_port = 3260
          volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_backend_name = backend2
          volume_group = stack-volumes-lvmdriver-1

          [[post-extra|\$TEMPEST_CONFIG]]
          [volume]
          backend1_name = backend1
          backend2_name = backend2
          [volume-feature-enabled]
          multi_backend = True

          [[test-config|\$TEMPEST_CONFIG]]
          [volume]
          backend1_name = backend1
          backend2_name = backend2
          [volume-feature-enabled]
          multi_backend = True


          EOF

- builder:
    name: configure-devstack-Cinder-ISER-LIO
    builders:
      - shell: |
          #!/bin/bash +e
          HCA=${HCA:-"mlx4"}
          mlx=`echo $HCA | sed s/mlx//g`
          let mlx=mlx-1
          export mlnx_dev=`lspci |grep Mell|grep "\-$mlx" |head -n1|awk '{print $1}' |  sed s/\.0\$//g`
          export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 |grep "port 1"| grep Up| awk '{print $5}'|tail -n1`
          export epioib_port=`ibdev2netdev  | grep ${HCA}_0 | grep Up| awk '{print $5}'|head -n1`
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              exit 1
          fi

          cat > devstack/local.conf <<EOF
          [[local|localrc]]
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          SERVICE_TOKEN=servicetoken
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port

          LIBS_FROM_GIT=os-brick
          RECLONE=yes
          LOG_COLOR=False
          PIP_UPGRADE=True
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          SCREEN_LOGDIR=\$LOGDIR/screen
          LOGDAYS=2

          disable_service n-net heat h-api h-api-cfn h-api-cw h-eng q-lbaas n-cauth
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta
          disable_service n-novnc n-xvnc horizon
          enable_service tempest

          #Neutron Configuration
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
          Q_USE_DEBUG_COMMAND=False
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          PHYSICAL_INTERFACE=$mlnx_port
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          Q_USE_SECGROUP=True
          PHYSICAL_NETWORK=default

          SWIFT_HASH=password
          SWIFT_REPLICAS=1
          SWIFT_DATA_DIR=$DEST/data

          [[post-config|/etc/cinder/cinder.conf]]
          [DEFAULT]
          iscsi_helper=lioadm
          enabled_backends =lvmdriver-1,backend1, backend2

          [lvmdriver-1]
          iscsi_ip_address=1.1.1.1
          iscsi_helper=lioadm
          iscsi_port = 3261
          volume_group = stack-volumes-lvmdriver-1
          iscsi_protocol = iser
          volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_backend_name = lvmdriver-1


          [backend1]
          iscsi_ip_address=1.1.1.1
          iscsi_helper=lioadm
          iscsi_protocol = iser
          iscsi_port = 3261
          volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_backend_name = backend1
          volume_group = stack-volumes-lvmdriver-1

          [backend2]
          iscsi_ip_address=1.1.1.1
          iscsi_helper=lioadm
          iscsi_protocol = iser
          iscsi_port = 3261
          volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
          volume_backend_name = backend2
          volume_group = stack-volumes-lvmdriver-1

          [[post-extra|\$TEMPEST_CONFIG]]
          [volume]
          backend1_name = backend1
          backend2_name = backend2
          [volume-feature-enabled]
          multi_backend = True

          [[test-config|\$TEMPEST_CONFIG]]
          [volume]
          backend1_name = backend1
          backend2_name = backend2
          [volume-feature-enabled]
          multi_backend = True
          EOF


- builder:
    name: run-tests-cinder
    builders:
      - shell: |
                #!/bin/bash +ex

                HCA=${HCA:-"mlx4"}
                mlx=`echo $HCA | sed s/mlx//g`
                let mlx=mlx-1
                export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 |grep "port 1"| grep Up| awk '{print $5}'|tail -n1`

                sudo ifconfig $mlnx_port 1.1.1.1/16 up

                echo "============ Starting tempest tests ====================="
                tests=(tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes
                       tempest.scenario.test_minimum_basic.TestMinimumBasicScenario
                       tempest.scenario.test_snapshot_pattern.TestSnapshotPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2
                       tempest.scenario.test_stamp_pattern.TestStampPattern
                )
                cd /opt/stack/tempest
                testr list-tests ${tests[@]}
                testr init
                virtualenv virt --no-site-packages
                . virt/bin/activate
                virt/bin/pip install -U -r requirements.txt
                testr run ${tests[@]}
                test_pass=$?
                deactivate

                if [[ $test_pass -ne 0 ]]; then
                    echo "FINISHED with ERROR: ############## $phase  ###################"
                    exit 1
                fi

- builder:
    name: run-tests-cinder-lio-simx
    builders:
      - shell: |
                #!/bin/bash +ex

                HCA=${HCA:-"mlx4"}
                mlx=`echo $HCA | sed s/mlx//g`
                let mlx=mlx-1
                export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 |grep "port 1"| grep Up| awk '{print $5}'|tail -n1`

                sudo ifconfig $mlnx_port 1.1.1.1/16 up

                echo "============ Starting tempest tests ====================="
                tests=(tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes
                       tempest.scenario.test_minimum_basic.TestMinimumBasicScenario
                       tempest.scenario.test_snapshot_pattern.TestSnapshotPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPattern
                       tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2
                       tempest.scenario.test_stamp_pattern.TestStampPattern
                )
                cd /opt/stack/tempest
                testr list-tests ${tests[@]}
                testr init
                test_pass=0
                for test in ${tests[@]}; do
                    testr run $test
                    rc=$?
                    let test_pass=test_pass+$rc
                done
                #virtualenv virt --no-site-packages
                #. virt/bin/activate
                #virt/bin/pip install -U -r requirements.txt
                #testr run ${tests[@]}
                #test_pass=$?
                #deactivate

                if [[ $test_pass -ne 0 ]]; then
                    echo "FINISHED with ERROR: ############## $phase  ###################"
                    exit 1
                fi

- builder:
    name: run-tests-cinder-iscsi-simx
    builders:
      - shell: |
                #!/bin/bash +ex

                HCA=${HCA:-"mlx4"}
                mlx=`echo $HCA | sed s/mlx//g`
                let mlx=mlx-1
                export mlnx_port=`ibdev2netdev  | grep ${HCA}_0 |grep "port 1"| grep Up| awk '{print $5}'|tail -n1`

                sudo ifconfig $mlnx_port 1.1.1.1/16 up

                echo "============ Starting tempest tests ====================="
                tests=(tempest.scenario.test_encrypted_cinder_volumes.TestEncryptedCinderVolumes
                       tempest.scenario.test_minimum_basic.TestMinimumBasicScenario
                       tempest.scenario.test_snapshot_pattern.TestSnapshotPattern
                       #tempest.scenario.test_volume_boot_pattern.TestVolumeBootPattern
                       #tempest.scenario.test_volume_boot_pattern.TestVolumeBootPatternV2
                       tempest.scenario.test_stamp_pattern.TestStampPattern
                )
                cd /opt/stack/tempest
                testr list-tests ${tests[@]}
                testr init
                virtualenv virt --no-site-packages
                . virt/bin/activate
                virt/bin/pip install -U -r requirements.txt
                testr run ${tests[@]}
                test_pass=$?
                deactivate

                if [[ $test_pass -ne 0 ]]; then
                    echo "FINISHED with ERROR: ############## $phase  ###################"
                    exit 1
                fi


- builder:
    name: load-vm
    builders:
        - shell: |
            #!/bin/bash -x
            SIMX_VM=${SIMX_VM:-'cloudx-17-07'}
            phase="Loading VM $SIMX_VM"
            echo "STARTED: ############## $phase  ###################"
            sudo ls /var/lib/libvirt/images
            sudo virsh shutdown --domain $SIMX_VM 2>&1|tee
            #TODO add while it's not shuted down
            virsh list | grep $SIMX_VM
            sleep 120
            sudo virsh snapshot-revert --domain $SIMX_VM --snapshotname $SIMX_SNAPSHOT --running
            retries=10
            while [ $retries -gt 0 ]; do
                state=$(sudo virsh list | grep $SIMX_VM | awk '{print $3}')
                if [ $state == 'running'  ]; then
                    echo "$SIMX_VM is running"
                    exit 0
                fi
                let retries=retries-1
                sleep 6
            done
            echo "$SIMX_VM is not running"
            exit 1

- builder:
    name: waitforonline-vm
    builders:
        - python: |
            #!/usr/bin/python
            import requests
            import sys
            import time
            import os
            from pprint import pprint

            timeout = 500
            stop = time.time() + timeout

            SIMX_VM = os.environ.get('SIMX_VM','cloudx-17-07')
            pprint(os.environ)
            phase="Waiting for Online status of %s" % SIMX_VM
            print phase
            url = 'http://10.224.33.37:8080/computer/%s/api/json' % SIMX_VM
            start = time.time()
            print "Started", start
            print "Time", time.time()
            while (time.time() < stop):
                r = requests.get(url)
                if r.json()['offline']:
                    time.sleep(2)
                else:
                    t = (time.time() - start)
                    print "%s is Online after %d sec" % (SIMX_VM, t)
                    time.sleep(20)
                    sys.exit(0)
            print "%s still Offline after %s seconds" % (SIMX_VM, timeout)
            pprint(r.json())
            sys.exit(1)
