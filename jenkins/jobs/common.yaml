- builder:
    name: check-environment
    builders:
        #- clone-git
        - shell: |
            #!/bin/bash -x
            status=0
            sudo killall -9 radvd 2>&1|tee > /dev/null

            sudo cat /proc/cmdline |grep intel_iommu
            #if [ "$?" != "0" ] && [ ! $(echo $JOB_NAME|grep -i Cinder) ] then
            #    echo "please add intel_iommu=on to /boot/grub/menu.lst or /etc/default/grub.cfg and run grub-mkconfig"
            #    exit 1
            #fi

            for pci in $(lspci |grep Mell |grep -v Virtual|awk '{print $1}'); do
                for p in $(ls -l /sys/class/net/ |grep $pci|awk '{print $9}'); do
                    sudo sh -c  "echo 4 > /sys/class/net/$p/device/mlx5_num_vfs" 2>&1|tee > /dev/null
                done
            done
            sudo timedatectl set-timezone 'Asia/Jerusalem'
            env

            git config --global user.email lennyb@mellanox.com
            git config --global  user.name "Lenny Verkhovsky"
            HCA=${HCA:-'Mellanox'}
            echo "lspci |grep Virtual|egrep \"$HCA\" |head -n1|awk '{print $1}'"
            export mlnx_dev=$(lspci |egrep "$HCA" |head -n1|awk '{print $1}'|cut -d'.' -f1)
            export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
            echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
            if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
                echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
            #    exit 1
            fi

            for i in $(ip link |awk '{print $2}' | egrep ':$'|cut -d':' -f1)
            do
               sudo ip link set $i up
            done

            ssh $LOGSERVER ls /tmp
            if [ "$?" != "0" ]; then
                echo "ERROR!!! no passwordless copy to $LOGSERVER"
                echo "#sudo -u stack ssh-keygen"
                echo "#sudo -u stack ssh-copy-id cloudx@13.74.249.42"
                exit 1
            fi

            echo "Environment is OK"


- builder:
    name: collect-config-files
    builders:
        - shell: |
            #!/bin/bash -x
            phase="******************** COLLECT CONFIG FILES *******************************"
            echo $phase
            CI_ARTIFACTS=$LOGDIR/..
            mkdir -p $LOGDIR
            mkdir -p $CI_ARTIFACTS/etc
            mkdir -p $CI_ARTIFACTS/env

            pip --version
            pip freeze > $CI_ARTIFACTS/env/pip-freeze-env.txt
            [ -d /opt/stack/tempest/virt ] && . /opt/stack/tempest/virt/bin/activate
            pip freeze > $CI_ARTIFACTS/env/pip-freeze-tempest.txt
            cat /etc/issue|grep -i 'ubuntu'
            if [ "$?" -eq 0  ]; then
                dpkg --list|sort > $CI_ARTIFACTS/env/packages.txt
            else
                rpm -qa| sort > $CI_ARTIFACTS/env/packages.txt
            fi
            sudo lvs > $CI_ARTIFACTS/env/lvs.txt
            env |sort > $CI_ARTIFACTS/env/environment.txt
            ip link show > $CI_ARTIFACTS/env/iplink.txt
            sudo ovs-vsctl show > $CI_ARTIFACTS/env/ovs-vsctl.txt
            sudo lspci|grep Mellanox > $CI_ARTIFACTS/env/lspci.txt
            sudo uname -a > $CI_ARTIFACTS/env/os.txt
            sudo cat /etc/issue >> $CI_ARTIFACTS/env/os.txt
            [ -f /etc/redhat-release ] && cat /etc/issue >> $CI_ARTIFACTS/env/os.txt
            sudo cp /var/log/messages $CI_ARTIFACTS/env/
            sudo ps -ef > $CI_ARTIFACTS/env/procs.log

            [ -f /usr/bin/ofed_info ] && /usr/bin/ofed_info -s 2>&1| tee > $CI_ARTIFACTS/env/ofed.info

            sudo cp /etc/modprobe.d/ml* $CI_ARTIFACTS/etc/
            [ -f /etc/tgt/tgtd.conf ] && sudo cp /etc/tgt/tgtd.conf $CI_ARTIFACTS/etc/

            projects=(glance nova neutron eswitchd cinder keystone swift ironic ironic-inspector)
            for project in ${projects[@]}; do
                [ -d /etc/$project ] && cp -r /etc/$project $CI_ARTIFACTS/etc/
            done

            [ -d /opt/stack/tempest/.stestr ] && cp -L -r /opt/stack/tempest/.stestr $CI_ARTIFACTS/
            [ -f /opt/stack/tempest/tempest.log ] && cp -L /opt/stack/tempest/tempest.log $LOGDIR/
            [ -f /opt/stack/tempest/etc/tempest.conf ] && cp -L /opt/stack/tempest/etc/tempest.conf $CI_ARTIFACTS
            [ -f $WORKSPACE/devstack/local.conf ] && cp $WORKSPACE/devstack/local.conf $CI_ARTIFACTS
            [ -f /var/log/eswitchd/eswitchd.log ] && cp /var/log/eswitchd/eswitchd.log $LOGDIR

            sudo cp /var/log/libvirt/libvirtd.log $LOGDIR
            #sudo cp -r /var/log/libvirt/qemu $LOGDIR

            pushd /opt/stack
            for folder in $(ls -l /opt/stack| egrep -v "log|status"| grep ^d| awk '{print $9}'); do
                mkdir -p $CI_ARTIFACTS/env/git/$folder
                pushd $folder
                git status > $CI_ARTIFACTS/env/git/${folder}/git_status.txt
                git log |head -n100 > $CI_ARTIFACTS/env/git/${folder}/git_log.txt
                git show > $CI_ARTIFACTS/env/git/${folder}/git_show.txt
                x=$(git rev-parse HEAD 2>/dev/null)
                if [ $? -eq 0 ]; then
                    echo "$folder $x" >> $CI_ARTIFACTS/env/stack_commits.txt
                fi
                popd
            done
            echo "$ZUUL_BRANCH" > $CI_ARTIFACTS/env/zuul_branch
            echo "$ZUUL_BRANCH" > $WORKSPACE/../zuul_branch
            exit 0


- builder:
    name: clean-environment
    builders:
        - shell: |
            #!/bin/bash -x
            phase="CLEAN-ENVIRONMENT"
            echo "STARTED:############## $phase  ###################"
            echo "Deleting files older than 1 days from /tmp"
            sudo find /tmp -type f -mtime +1 -exec sudo rm -rf {} \;
            sudo find /tmp -type d -mtime +1 -exec sudo rm -rf {} \;
            echo "Deleting archives older than 10 days from /var/log"
            sudo rm -f `sudo find /var/log -name *.gz`

            if [ -f $WORKSPACE/../zuul_branch ];then
                zuul=$(cat $WORKSPACE/../zuul_branch)
                ZUUL_BRANCH=${ZUUL_BRANCH:-master}
                if [[ ! "$zuul" == "$ZUUL_BRANCH" ]]; then
                   echo "Deleting cache since current and previous branchs are different $zuul $ZUUL_BRANCH"
                   rm -rf ~/.cache/*
                   sudo rm -rf /root/.cache/pip
                   sudo rm -rf /var/cache/apt
                fi
            fi

            sudo sh -c "> /var/log/conntrackd-stats.log"
            sudo sh -c "> /var/log/libvirt/libvirtd.log"
            sudo rm -f `sudo find /var/log -name *.log.*`

            [[ $(cat /etc/issue|grep -i 'ubuntu') ]] && sudo dpkg --configure -a
            sudo dmesg -c > /dev/null
            sudo sh -c "> /var/log/messages"

            [ -f /opt/stack/tempest/tempest.log ] && rm -f /opt/stack/tempest/tempest.log

            [ ! -d $WORKSPACE/devstack/ ] && git clone /home_stack/git/devstack $WORKSPACE/devstack
            #[ ! -d $WORKSPACE/devstack/ ] && git clone https://github.com/openstack-dev/devstack.git $WORKSPACE/devstack
            echo "Cleaning up possible remainings of previous builds."

            #sudo kill -9 $(ps -ef |grep python | grep neutron | awk '{print $2}')
            sudo systemctl stop devstack*
            sleep 20
            $WORKSPACE/devstack/clean.sh
            sudo systemctl stop devstack*
            sudo systemctl stop devstack*
            sudo kill -9 $(pgrep neutron-server) 2>&1|tee > /dev/null
            echo "Show procs after cleaning"
            ps -ef |egrep "python|stack"

            # Remove stack screens leftovers
            sudo screen -wipe
            screen -wipe

            # Check Cinder leftovers
            if [ $(echo $JOB_NAME|grep -i Cinder) ]; then
                echo "Cleaning Cinder left volumes"
                sudo lvs
                #sudo $WORKSPACE/mlnx-project-config/tools/cinder-rtstool clean
                if [ -f /usr/bin/cinder-rtstool ]; then
                    for target in $(cinder-rtstool get-targets); do
                        sudo cinder-rtstool delete $target
                    done
                fi
                [ -f /usr/sbin/nvmetcli ] && sudo nvmetcli clear 2>&1|tee
                sudo losetup -a
                sudo systemctl stop tgtd > /dev/null 2>&1 || true
                sudo lvremove -f stack-volumes-lvmdriver-1
            fi

            sudo kill $(pgrep rabbitmq)
            sudo kill $(pgrep beam.smp)
            sudo kill $(ps -ef |grep swift | grep pyth | awk '{print $2}')
            sleep 5
            sudo kill -9 $(pgrep rabbitmq)
            sudo kill -9 $(pgrep beam.smp)
            sudo kill -9 $(ps -ef |grep swift | grep pyth | awk '{print $2}')
            sudo kill -9 $(ps -ef |grep neutron | grep -v grep | awk '{print $2}')
            kill -9 $(ps -ef |grep add_mac | grep -v grep | awk '{print $2}') 2>&1|tee > /dev/null

            [ -d /opt/stack/tempest/.stestr ] && rm -rf /opt/stack/tempest/.stestr

            cd $WORKSPACE/devstack
            for i in $(pip list|grep -v pip|awk '{print $1}'); do
                sudo pip uninstall $i -y;
            done
            for file in $(ls -1 /usr/local/lib/python2.7/dist-packages/ | grep -v pip);do
                sudo rm -rf /usr/local/lib/python2.7/dist-packages/$file
            done

            sudo kill -9 $(pgrep ovsdb-server)
            sudo kill -9 $(pgrep ovs-vswitchd)
            sudo kill -9 $(pgrep haproxy)

            pushd /usr/local/lib/python2.7/dist-packages/
            sudo rm -rf $(ls -1 | grep -v pip)
            popd

            cat /etc/issue|grep -i 'ubuntu'
            if [ ! -z $? ]; then
                sudo apt-get install python-docutils python-pkg-resources gnupg libpcre3-dev -y 2>&1|tee
                sudo apt-get remove -y $(dpkg --list|grep apache2 | awk '{print $2}')
                sudo systemctl stop httpd
                sudo dpkg --purge $(dpkg --list|grep apache2 | awk '{print $2}')
            else
                sudo systemctl stop httpd
                sudo yum remove -y httpd
                sudo rm -rf /etc/httpd
                sudo yum install python-docutils python-pkg-resources gnupg python-requests rabbitmq-server -y 2>&1|tee
            fi

            sudo pip install appdirs==1.4.3
            sudo pip install setuptools
            sudo pip install pbr
            sudo pip install six
            sudo pip install jinja2
            sudo pip install babel
            sudo pip install docutils
            sudo pip install oslo.privsep
            sudo pip install requests
            sudo pip install subunit

            [ -d $WORKSPACE/ci-artifacts ] && rm -rf $WORKSPACE/ci-artifacts
            if [[ -n $ZUUL_PROJECT ]]; then
                project=$(echo $ZUUL_PROJECT | cut -d'/' -f2)
                [ -d /opt/stack/$project ] && rm -rf /opt/stack/$project
            fi

            sudo rm -f /var/log/apache2/keystone*
            sudo rm -rf /usr/lib/python2.7/site-packages/tempest*

            #Cleaning semaphores"
            for sem in `ipcs -s | grep root|awk '{print $2}'`; do
                for pid in `ipcs -s -i $sem|grep pid -a1|tail -n1|awk '{print $NF}'`; do
                    [ ! -d /proc/$pid ] && sudo ipcrm -s $sem
                done
            done

            #sudo kill -9 $(ps -ef |egrep "python|conf"|grep -v grep| egrep -v "ipoibd|tuned")
            for i in $(ifconfig -a|egrep "^q" | cut -d':' -f1); do sudo ip link delete $i; done

            echo "Check if ipoibd is running"
            ipoibd=`pgrep ipoibd`

            if [[ -n $ipoibd ]]; then
                echo "Restarting ipoibd"
                sudo /sbin/ipoibd -D eth_ipoib & 2>&1|tee > /dev/null
            fi

            sudo rm -rf /opt/stack
            sudo rm -f /var/log/libvirt/qemu/*
            env
            sudo journalctl --vacuum-time=1seconds
            sudo systemctl restart systemd-journald
            sudo systemctl restart libvirtd 2>&1|tee
            echo "Show alll python processes"
            ps -ef |grep python
            echo "FINISHED:############## $phase  ###################"

- builder:
    name: apply-workarounds-pre-stack
    builders:
        - shell: |
            #!/bin/bash -x
            phase="APPLY-WORKAROUNDS-PRE"
            echo "STARTED: ############## $phase  ###################"

            echo "Delete all Bridges"
            br=$(sudo ovs-vsctl list-br 2>&1|tee)
            if [ ! -z "$br" ]; then
                for br in $(sudo ovs-vsctl list-br); do
                    sudo ovs-vsctl del-br $br 2>&1|tee > /dev/null
                done
            fi
            echo "Done"


- builder:
    name: apply-workarounds-post-stack
    builders:
        - shell: |
            #!/bin/bash -xE
            phase="APPLY-WORKAROUNDS-POST"
            echo "STARTED: ############## $phase  ###################"

            for port in `ibdev2netdev |grep _0 | grep Up |awk '{print $5}'`; do
                if [ -z $port ]; then
                    echo "Error finding ipoib port"
                    echo "ibdev2netdev |grep _0 |grep Up |awk '{print $5}'"
                    exit 1
                else
                    sudo ovs-vsctl --may-exist add-port br-$port $port 2>&1|tee> /dev/null
                fi
            done

            #sudo modprobe ib_isert 2>&1|tee > /dev/null
            #sudo modprobe ib_iser 2>&1|tee > /dev/null

- builder:
    name: apply-workarounds-post-stack-Nova-ML2-Sriov-Multinode-Compute
    builders:
        - shell: |
            #!/bin/bash -xE
            phase="APPLY-WORKAROUNDS-POST"
            echo "STARTED: ############## $phase  ###################"

- builder:
    name: apply-workarounds-post-stack-Nova-ML2-Sriov-Multinode-Controller
    builders:
        - shell: |
            #!/bin/bash -xE
            phase="APPLY-WORKAROUNDS-POST"
            echo "STARTED: ############## $phase  ###################"


- builder:
    name: apply-workarounds-tempest
    builders:
        - shell: |
            #!/bin/bash -x
            phase="APPLY-WORKAROUNDS-POST-TEMPEST"
            echo "STARTED: ############## $phase  ###################"



- builder:
    name: noop-run
    builders:
      - shell: |
          #!/bin/bash -ex
          env
          echo "Hello World from "$(hostname)


- builder:
    name: configure-devstack-Neutron-ML2-MLNX
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-MLNX"
          echo "STARTED: ############## $phase  ###################"
          if [ "$ZUUL_PROJECT" == "openstack/networking-mlnx" ]; then
              export NETWORKING_MLNX_BRANCH=`echo $ZUUL_CHANGES|rev|cut -d':' -f1|rev`
          else
              export NETWORKING_MLNX_BRANCH=$ZUUL_BRANCH
          fi

          ZUUL_BRANCH=${ZUUL_BRANCH:-'master'}
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| grep ib| head -n1)
          export epioib_port=$(ibdev2netdev  | grep mlx4_0 | grep Up| awk '{print $5}'|head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi
          cat > $WORKSPACE/devstack/local.conf  <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox-x86_64-disk-ib.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(hostname -i)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          epioib_port=$epioib_port
          NETWORKING_MLNX_BRANCH=${NETWORKING_MLNX_BRANCH:-\$ZUUL_BRANCH}
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=mlnx_infiniband,openvswitch
          Q_AGENT=openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:10
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$epioib_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta n-xvnc n-novnc
          enable_service eswitchd
          enable_service mlnx-agt mlnx_dnsmasq
          enable_plugin neutron_ml2_mlnx git://github.com/openstack/networking-mlnx ${NETWORKING_MLNX_BRANCH}
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          ${OVS_WA}
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          suspend=false
          resize=false
          interface_attach = False
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Neutron-MACVTAP-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-sriov-agt q-qos n-xvnc n-novnc
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          agent_required=True
          [ml2_sriov]
          supported_pci_vendor_devs=15b3:1014,15b3:1016
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,network,qos,security-group
          #port-security
          [compute-feature-enabled]
          resize=false
          interface_attach = False
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Neutron-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-sriov-agt q-qos n-xvnc n-novnc
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          api_extensions=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,network,qos,security-group
          #port-security
          [validation]
          ssh_timeout = 300
          ping_timeout = 400
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Neutron-Networking-MLNX-ML2
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Neutron-Networking-MLNX-ML2"
          echo "STARTED: ############## $phase  ###################"
          ZUUL_BRANCH=${ZUUL_BRANCH:-'master'}
          if [ "$ZUUL_PROJECT" == "openstack/networking-mlnx" ]; then
              export NETWORKING_MLNX_BRANCH=`echo $ZUUL_CHANGES|rev|cut -d':' -f1|rev`
          else
              export NETWORKING_MLNX_BRANCH=$ZUUL_BRANCH
          fi

          ZUUL_BRANCH=${ZUUL_BRANCH:='master'}

          echo "NETWORKING_MLNX_BRANCH=$NETWORKING_MLNX_BRANCH"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| grep ib|head -n1)
          export epioib_port=$(ibdev2netdev  | grep mlx4_0 | grep Up| awk '{print $5}'|head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox-x86_64-disk-ib.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(hostname -i)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          epioib_port=$epioib_port
          PUBLIC_INTERFACE=$epioib_port
          NETWORKING_MLNX_BRANCH=${NETWORKING_MLNX_BRANCH:-\$ZUUL_BRANCH}
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=mlnx_sdn_assist,mlnx_infiniband,openvswitch
          Q_AGENT=openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:10
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$epioib_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt n-xvnc n-novnc
          enable_service mlnx-agt mlnx_dnsmasq eswitchd
          enable_plugin neutron_ml2_mlnx git://github.com/openstack/networking-mlnx ${NETWORKING_MLNX_BRANCH}
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [sdn]
          url = http://127.0.0.1/neo
          domain = cloudx
          username = admin
          password = admin
          ${OVS_WA}
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          resize=false
          interface_attach = False
          [network]
          port_vnic_type=direct
          [network-feature-enabled]
          port_admin_state_change=false
          [scenario]
          dhcp_client=
          [compute]
          flavor_ref=2
          flavor_ref_alt=2
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Nova-MACVTAP-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Nova-MACVTAP-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          PIP_UPGRADE=False
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-sriov-agt q-qos n-xvnc n-novnc
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          #scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          supported_pci_vendor_devs=15b3:1014,15b3:1016
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=macvtap
          [compute-feature-enabled]
          resize=false
          interface_attach = False
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Nova-ML2-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Nova-ML2-Sriov"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-'Mellanox'}
          echo "lspci |grep Virtual|egrep $HCA |head -n1|awk '{print $1}'"
          export mlnx_dev=$(lspci |grep Virtual|egrep "$HCA" |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi


          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-sriov-agt q-qos n-xvnc n-novnc
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          #scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Tempest-Sriov
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Tempest-Sriov"
          echo "STARTED: ############## $phase  ###################"
          HCA=${HCA:-'Mellanox'}
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=False
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service n-net n-cauth h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-dhcp q-l3 q-meta q-agt q-sriov-agt q-qos n-xvnc n-novnc
          enable_plugin neutron git://git.openstack.org/openstack/neutron $NEUTRON_BRANCH
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          # Optional, to enable tempest configuration as part of devstack
          enable_service tempest

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          #scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          pci_passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [network]
          port_vnic_type=direct
          [compute-feature-enabled]
          suspend=false
          resize=false
          interface_attach = False
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: configure-devstack-Nova-ML2-Sriov-Multinode-Compute
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Multinode-Compute"
          echo "STARTED: ############## $phase  ###################"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          export CONTROLLER_NODE=${CONTROLLER_NODE:-"10.224.33.57"}
          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          MULTI_HOST=1
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          SERVICE_HOST=$CONTROLLER_NODE
          MYSQL_HOST=$CONTROLLER_NODE
          RABBIT_HOST=$CONTROLLER_NODE
          Q_HOST=$CONTROLLER_NODE
          GLANCE_HOSTPORT=$CONTROLLER_NODE:9292
          NOVA_VNC_ENABLED=True
          NOVNCPROXY_URL="http://$CONTROLLER_NODE:6080/vnc_auto.html"
          VNCSERVER_LISTEN=\$HOST_IP
          VNCSERVER_PROXYCLIENT_ADDRESS=\$VNCSERVER_LISTEN
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services

          ENABLED_SERVICES=n-cpu,q-agt,n-api-meta,n-novnc,n-xvnc,q-sriov-agt,placement-client
          enable_plugin neutron git://git.openstack.org/openstack/neutron
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git
          disable_service tempest n-cauth c-vol etcd3

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          enabled_apis = osapi_compute
          #scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          allow_resize_to_same_host = False
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: configure-devstack-Nova-ML2-Sriov-Multinode-Controller
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CONFIGURE-DEVSTACK-Multinode-Controller"
          echo "STARTED: ############## $phase  ###################"
          export mlnx_dev=$(lspci |grep Mell|egrep $HCA |head -n1|awk '{print $1}'| cut -d'.' -f1)
          export mlnx_port=$(ls -l /sys/class/net/| grep $mlnx_dev|awk '{print $9}'| head -n1)
          echo "HCA=$HCA, mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
          if [ -z "$mlnx_dev" ] || [ -z "$mlnx_port" ]; then
              echo "mlnx_dev=$mlnx_dev mlnx_port=$mlnx_port"
              exit 1
          fi

          export NEUTRON_REPO=${NEUTRON_REPO:-git://git.openstack.org/openstack/neutron}
          export HOST_IP=$(host $(hostname) | cut -d' ' -f4)

          cat > $WORKSPACE/devstack/local.conf <<EOF
          [[local|localrc]]
          DOWNLOAD_DEFAULT_IMAGES=False
          IMAGE_URLS="http://$IMAGE_SERVER/images/cirros-mellanox_eth.img,"
          MULTI_HOST=1
          ADMIN_PASSWORD=password
          MYSQL_PASSWORD=password
          RABBIT_PASSWORD=password
          SERVICE_PASSWORD=password
          LIBS_FROM_GIT=python-neutronclient
          SERVICE_TOKEN=servicetoken
          IDENTITY_API_VERSION=3
          HOST_IP=$(host $(hostname) | cut -d' ' -f4)
          PIP_UPGRADE=False
          SUBNETPOOL_PREFIX_V4=172.0.0.0/16
          mlnx_dev=$mlnx_dev
          mlnx_port=$mlnx_port
          PUBLIC_INTERFACE=$mlnx_port
          # Logging
          LOGDIR=\${LOGDIR:-/opt/stack/logs}
          LOGFILE=\$LOGDIR/stack.sh.log
          LOG_COLOR=False
          RECLONE=yes
          # Cinder
          VOLUME_BACKING_FILE_SIZE=1000M
          # Keystone
          SERVICE_TOKEN=servicetoken
          # Neutron
          Q_PLUGIN=ml2
          Q_AGENT=openvswitch
          Q_ML2_PLUGIN_MECHANISM_DRIVERS=sriovnicswitch,openvswitch
          Q_USE_DEBUG_COMMAND=False
          Q_USE_SECGROUP=True
          ENABLE_TENANT_VLANS=True
          Q_ML2_PLUGIN_TYPE_DRIVERS=vlan
          ENABLE_TENANT_TUNNELS=False
          Q_ML2_TENANT_NETWORK_TYPE=vlan
          PHYSICAL_NETWORK=default
          PHYSICAL_INTERFACE=${mlnx_port}
          TENANT_VLAN_RANGE=2:100
          NETWORK_API_EXTENSIONS=dhcp_agent_scheduler,external-net,ext-gw-mode,binding,quotas,agent,l3_agent_scheduler,provider,router,extraroute,security-group
          #port-security
          OVS_PHYSICAL_BRIDGE=br-$mlnx_port
          ALLOW_NEUTRON_DB_MIGRATIONS=true
          Q_USE_PROVIDERNET_FOR_PUBLIC=False
          # Services
          disable_service h-eng h-api h-api-cfn h-api-cw c-vol etcd3 horizon
          enable_service neutron q-svc q-agt q-dhcp q-l3 q-meta q-sriov-agt tempest n-novnc n-xvnc placement-api
          enable_plugin neutron git://git.openstack.org/openstack/neutron
          enable_plugin neutron-tempest-plugin https://github.com/openstack/neutron-tempest-plugin.git

          [[post-config|\$NOVA_CONF]]
          [DEFAULT]
          #scheduler_available_filters=nova.scheduler.filters.all_filters
          scheduler_default_filters = RetryFilter, AvailabilityZoneFilter, RamFilter, ComputeFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, PciPassthroughFilter
          [pci]
          passthrough_whitelist ={"'"address"'":"'"*:'"${mlnx_dev}"'.*"'","'"physical_network"'":"'"default"'"}
          [filter_scheduler]
          enabled_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,SameHostFilter,DifferentHostFilter,PciPassthroughFilter
          [[post-config|/etc/neutron/plugins/ml2/ml2_conf.ini]]
          [ml2_sriov]
          agent_required=True
          [agent]
          supported_pci_vendor_devs = 15b3:1004,15b3:1014
          extensions=fdb
          [FDB]
          shared_physical_device_mappings=default:${mlnx_port}
          [[test-config|\$TEMPEST_CONFIG]]
          [compute-feature-enabled]
          migrate=True
          interface_attach = False
          [compute]
          min_compute_nodes=2
          [network]
          port_vnic_type=direct
          [validation]
          ssh_timeout = 300
          EOF
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: mlnx-project-config
    builders:
       - shell: |
          #!/bin/bash -ex
          phase="EXTERNAL-TESTING-CHECKOUT"
          echo "STARTED: ############## $phase  ###################"
          [ -d $WORKSPACE/mlnx-project-config ] && rm -rf $WORKSPACE/mlnx-project-config
          git clone https://github.com/Mellanox/mlnx-project-config.git $WORKSPACE/mlnx-project-config
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-stacksh
    builders:
      - delete-fdb
      - shell: |
          #!/bin/bash -x
          phase="RUN-STACKSH"
          echo "STARTED: ############## $phase  ###################"v
          if [[ -n $ZUUL_PROJECT ]]; then
              project=$(echo $ZUUL_PROJECT | cut -d'/' -f2)
              refspec=$(echo ${ZUUL_CHANGES##*^} | rev|cut -d':' -f1|rev)
              project=${project//-/_}
              export ${project^^}_BRANCH=$refspec
          fi

          BUILD_ID=dontKillMe $WORKSPACE/devstack/stack.sh
          rc=$?

          if [[ $rc -ne 0 ]]; then
              echo "FINISHED with ERROR $rc: ############## $phase  ###################"
              exit $rc
          fi
          sleep 20
          . $WORKSPACE/devstack/openrc admin
          if [ -f $WORKSPACE/devstack/tools/discover_hosts.sh ]; then
              $WORKSPACE/devstack/tools/discover_hosts.sh
          else
              nova-manage cell_v2 discover_hosts
          fi
          sleep 20
          nova hypervisor-list
          echo "############## Stack is up and running ###################"
          echo "FINISHED: ############## $phase  ###################"
          exit 0

- builder:
    name: collect-devstack-syslog
    builders:
      - shell: |
          #!/bin/bash
          CI_ARTIFACTS=${LOGDIR:-/opt/stack/logs}
          echo "Saving SYSLOG files to $CI_ARTIFACTS"
          mkdir -p $CI_ARTIFACTS
          sudo systemctl status devstack\* > $CI_ARTIFACTS/devstack_services_status.log
          for s in $(systemctl list-unit-files| grep devstack | awk '{print $1}'|sort)
          do
              log_name=$CI_ARTIFACTS/$(echo $s|cut -d'@' -f2).log
              echo $log_name
              sudo journalctl -o short-precise --unit $s > $log_name
          done


- builder:
    name: stop-stacksh
    builders:
      - shell: |
          #!/bin/bash -x
          phase="STOP-STACKSH"
          sudo systemctl stop devstack\*
          echo "STARTED: ############## $phase  ###################"
          if [ -f $WORKSPACE/devstack/unstack.sh ];then
             $WORKSPACE/devstack/unstack.sh 2>&1|tee
          fi
           [ -f /usr/sbin/nvmetcli ] && sudo nvmetcli clear 2>&1|tee
          echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-API"
            echo "STARTED: ############## $phase  ###################"
            cd /opt/stack/tempest
            tests=ironic_tempest_plugin.tests.api
            stestr init
            stestr list ${tests[@]}
            #tox -eall ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-configure-Real-BM
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-configure-Real-BM"
            echo "STARTED: ############## $phase  ###################"
            test_pass=$?
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-Ironic-IB-run-Real-BM
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-IRONIC-IB-run-Real-BM"
            echo "STARTED: ############## $phase  ###################"
            test_pass=$?
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"




- builder:
    name: run-tests-Neutron-ML2-MLNX
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NEUTRON-ML2-MLNX"
            echo "STARTED: ############## $phase  ###################"

            tests=(
                  tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_pause_unpause
                  tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_reboot
                  tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_rebuild
                  #tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_resize
                  #tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_stop_start
                  #tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_suspend_resume
                  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_connectivity_between_vms_on_different_networks
                  #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_hotplug_nic
                  #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_mtu_sized_frames
                  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_network_basic_ops
                  #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_port_security_macspoofing_port
                  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_preserve_preexisting_port
                  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_router_rescheduling
                  #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_subnet_details
                  #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_instance_port_admin_state
                  tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_router_admin_state
             )
            tests=(
                tempest.api.network.admin.test_dhcp
                tempest.api.network.admin.test_agent
                tempest.api.network.test_floating_ips
                tempest.api.network.test_networks
                tempest.api.network.test_extensions
                #tempest.scenario.test_network_basic_ops
                tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_preserve_preexisting_port
                #LNY TOFIX test_router_rescheduling works on old Ubuntu CI
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_router_rescheduling
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_router_admin_state
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.TestNetworkBasicOps.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.TestNetworkBasicOps.test_server_connectivity_reboot
            )

            cd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            #virtualenv virt --no-site-packages
            #. virt/bin/activate
            #virt/bin/pip install -U -r requirements.txt
            #stestr run ${tests[@]}
            for t in $(stestr list ${tests[@]} |cut -d'[' -f1); do
                stestr run $t
                let test_pass=test_pass+$?
                sleep 1
            done

            #test_pass=$?
            #deactivate
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: run-tests-Neutron-ML2-Sriov-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Neutron-ML2-Sriov-API"
            echo "STARTED: ############## $phase  ###################"
            tests=(tempest.api.network.admin.test_dhcp
                tempest.api.network.admin.test_agent
                tempest.api.network.test_floating_ips
                tempest.api.network.test_networks
                tempest.api.network.test_routers
                tempest.api.network.test_extensions
            )
            cd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: run-tests-Neutron-Networking-MLNX-ML2
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NEUTRON-NETWORKING-MLNX-ML2"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                #tempest.api.network.admin.test_dhcp
                #tempest.api.network.admin.test_agent
                #tempest.api.network.test_floating_ips
                #tempest.api.network.test_networks
                #tempest.api.network.test_extensions
                #tempest.scenario.test_network_basic_ops
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_connectivity_between_vms_on_different_networks
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_network_basic_ops
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_router_rescheduling
                #tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_update_router_admin_state
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_reboot
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_rebuild
                tempest.scenario.test_network_advanced_server_ops.test_server_connectivity_resize
                tempest.scenario.test_network_basic_ops.TestNetworkBasicOps.test_preserve_preexisting_port
                #neutron.tests.tempest.scenario.test_basic
                #neutron.tests.tempest.scenario.test_floatingip
                )
            pushd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run ${tests[@]}
            test_pass=$?
            deactivate
            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-network-add
    builders:
        - shell: |
            #!/bin/bash -x
            if [ ! -z $ZUUL_BRANCH ] && [ $ZUUL_BRANCH == 'stable/pike' ]; then
                echo "Branch $ZUUL_BRANCH is not supported"
                exit 0
            fi
            #exit 0
            phase="run-tests-network-add"
            echo "STARTED: ############## $phase  ###################"
            pushd /opt/stack/tempest
            stestr init
            tests=(
                   neutron_tempest_plugin.scenario.admin.test_floatingip.FloatingIpTestCasesAdmin
                   #TOFIX vnic_type still normal
                   #neutron_tempest_plugin.scenario.test_basic.NetworkBasicTest
                   neutron_tempest_plugin.scenario.test_floatingip.DefaultSnatToExternal
                   #TOFIX vnic_type still normal
                   #neutron_tempest_plugin.scenario.test_security_groups.NetworkSecGroupTest
                   neutron_tempest_plugin.scenario.test_security_groups.NetworkSecGroupTest.test_ip_prefix
                   )
            stestr run ${tests[@]}
            test_pass=$?

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-network-basic
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NETWORK-BASIC"
            echo "STARTED: ############## $phase  ###################"
            pushd /opt/stack/tempest
            stestr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run tempest.scenario.test_network_basic_ops
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-sanity-check
    builders:
        - shell: |
            #!/bin/bash -ex
            phase="RUN-TESTS-SANITY"
            echo "STARTED: ############## $phase  ###################"
            neutron net-list
            cd /opt/stack/tempest
            stestr init
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            deactivate
            cd -


- builder:
    name: run-tests-network-advanced
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-NETWORK-ADVANCED"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                #tempest.scenario.test_network_advanced_server_ops
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_pause_unpause
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_reboot
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_resize
                tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_stop_start
            )
            pushd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            status=0
            stestr run ${tests[@]}
            status=$?
            deactivate

            if [[ $status -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit $status
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: run-tests-multinode
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-MULTINODE"
            source $WORKSPACE/../Nova-ML2-Sriov-Multinode-Controller/devstack/openrc admin
            $WORKSPACE/../Nova-ML2-Sriov-Multinode-Controller/devstack/tools/discover_hosts.sh
            nova hypervisor-list
            sleep 60

            [ -d /opt/stack/tempest/.stestr ] && rm -rf /opt/stack/tempest/.stestr
            echo "STARTED: ############## $phase  ###################"
            tests=(
                  tempest.scenario.test_server_multinode.TestServerMultinode.test_schedule_to_all_nodes
                  #TOFIX
                  #tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_cold_migration_revert
                  #tempest.scenario.test_network_advanced_server_ops.TestNetworkAdvancedServerOps.test_server_connectivity_cold_migration
            )
            pushd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"


- builder:
    name: run-tests-Nova-ML2-Sriov-API
    builders:
        - shell: |
            #!/bin/bash
            phase="RUN-TESTS-Nova-ML2-Sriov-API"
            echo "STARTED: ############## $phase  ###################"
            tests=(
                tempest.api.compute.servers.test_server_personality
                tempest.api.compute.servers.test_virtual_interfaces_negative
                tempest.api.compute.servers.test_list_server_filters
                tempest.api.compute.servers.test_multiple_create_negative
                tempest.api.compute.servers.test_server_metadata
                tempest.api.compute.servers.test_attach_interfaces
                tempest.api.compute.servers.test_server_addresses_negative
                tempest.api.compute.servers.test_availability_zone
                tempest.api.compute.servers.test_server_group
                tempest.api.compute.servers.test_server_password
                tempest.api.compute.servers.test_create_server
                tempest.api.compute.servers.test_multiple_create
                tempest.api.compute.servers.test_servers_negative
                tempest.api.compute.servers.test_virtual_interfaces
                tempest.api.compute.servers.test_server_metadata_negative
                tempest.api.compute.servers.test_server_actions
                tempest.api.compute.servers.test_servers
                tempest.api.compute.servers.test_instance_actions
                tempest.api.compute.servers.test_server_addresses
                tempest.api.compute.servers.test_list_servers_negative
                tempest.api.compute.servers.test_instance_actions_negative
                tempest.api.compute.servers.test_disk_config
                tempest.api.compute.certificates.test_certificates
                tempest.api.compute.flavors.test_flavors_negative
                tempest.api.compute.flavors.test_flavors
                tempest.api.compute.test_authorization
                tempest.api.compute.volumes.test_volumes_negative
                tempest.api.compute.test_live_block_migration
                tempest.api.compute.images.test_image_metadata_negative
                tempest.api.compute.images.test_images_oneserver
                tempest.api.compute.images.test_image_metadata
                tempest.api.compute.images.test_list_image_filters_negative
                tempest.api.compute.images.test_images_oneserver_negative
                tempest.api.compute.images.test_images_negative
                tempest.api.compute.images.test_list_images
                tempest.api.compute.images.test_list_image_filters
                tempest.api.compute.images.test_images
                tempest.api.compute.admin.test_security_groups
                tempest.api.compute.admin.test_flavors_access_negative
                tempest.api.compute.admin.test_flavors_negative
                tempest.api.compute.admin.test_flavors_extra_specs
                tempest.api.compute.admin.test_flavors_extra_specs_negative
                tempest.api.compute.admin.test_simple_tenant_usage_negative
                tempest.api.compute.admin.test_availability_zone
                tempest.api.compute.admin.test_quotas_negative
                tempest.api.compute.admin.test_hosts_negative
                tempest.api.compute.admin.test_fixed_ips_negative
                tempest.api.compute.admin.test_fixed_ips
                tempest.api.compute.admin.test_hosts
                tempest.api.compute.admin.test_services_negative
                tempest.api.compute.admin.test_instance_usage_audit_log_negative
                tempest.api.compute.admin.test_availability_zone_negative
                tempest.api.compute.admin.test_aggregates
                tempest.api.compute.admin.test_aggregates_negative
                tempest.api.compute.admin.test_networks
                tempest.api.compute.admin.test_simple_tenant_usage
                tempest.api.compute.admin.test_servers_negative
                tempest.api.compute.admin.test_hypervisor
                tempest.api.compute.admin.test_servers
                tempest.api.compute.admin.test_quotas
                tempest.api.compute.admin.test_flavors_access
                tempest.api.compute.admin.test_floating_ips_bulk
                tempest.api.compute.admin.test_security_group_default_rules
                tempest.api.compute.admin.test_hypervisor_negative
                tempest.api.compute.admin.test_instance_usage_audit_log
                tempest.api.compute.admin.test_services
                tempest.api.compute.admin.test_baremetal_nodes
                tempest.api.compute.admin.test_migrations
                tempest.api.compute.admin.test_agents
                tempest.api.compute.admin.test_flavors
                tempest.api.compute.limits.test_absolute_limits_negative
                tempest.api.compute.limits.test_absolute_limits
                tempest.api.compute.test_extensions
                tempest.api.compute.test_live_block_migration_negative
                tempest.api.compute.floating_ips.test_list_floating_ips
                tempest.api.compute.floating_ips.test_floating_ips_actions
                tempest.api.compute.floating_ips.test_floating_ips_actions_negative
                tempest.api.compute.floating_ips.test_list_floating_ips_negative
                tempest.api.compute.floating_ips.base
                tempest.api.compute.test_networks
                tempest.api.compute.keypairs.test_keypairs_negative
                tempest.api.compute.keypairs.test_keypairs
                tempest.api.compute.test_quotas
                tempest.api.compute.test_tenant_networks
                tempest.api.compute.security_groups.base
            )
            tests=(
                tempest.api.compute.servers.test_server_actions.ServerActionsTestJSON.test_resize_server_confirm
                tempest.api.compute.servers.test_server_actions.ServerActionsTestJSON.test_resize_server_revert
                )

            pushd /opt/stack/tempest
            stestr init
            stestr list ${tests[@]}
            virtualenv virt --no-site-packages
            . virt/bin/activate
            virt/bin/pip install -U -r requirements.txt
            stestr run ${tests[@]}
            test_pass=$?
            deactivate

            if [[ $test_pass -ne 0 ]]; then
                echo "FINISHED with ERROR: ############## $phase  ###################"
                exit 1
            fi
            popd
            echo "FINISHED: ############## $phase  ###################"

- builder:
    name: collect-artifacts
    builders:
      - shell: |
          #!/bin/bash -x
          #   /bin/bash -eEx
          phase="COLLECT-ARTIFACTS"
          echo "STARTED: ############## $phase  ###################"
          CI_ARTIFACTS=$(dirname ${LOGDIR})
          dmesg -T 2>&1|tee > $CI_ARTIFACTS/logs/dmesg.log
          mysql -e"show status like 'Conn%';" > $CI_ARTIFACTS/logs/mysql_connections.txt
          netstat  | grep CONNEC|wc $CI_ARTIFACTS/logs/netstat_connections.txt

          if [ ! -f /usr/sbin/tgtd ];then
              echo "TGT Status"
              sudo systemctl status tgtd 2>&1 |tee
          fi

          tmp_subunit=/tmp/tempest_results_$$
          for results in '/opt/stack/neutron' '/opt/stack/tempest'; do
             stestr_tests=$results/.stestr/0
              if [ -f $stestr_tests ]; then
                  pushd $results/.stestr
                  for file in `find . -regex '.*[0-9][0-9]?'`
                      do cat $file >> $tmp_subunit
                  done
                  popd
              fi
          done
          if [ -f $tmp_subunit ]; then
              $WORKSPACE/mlnx-project-config/tools/subunit2html.py $tmp_subunit $CI_ARTIFACTS/stestr_results.html
              rm -f $tmp_subunit
          fi
          sudo chown -R stack $CI_ARTIFACTS

          [ -d $WORKSPACE/mlnx-project-config ] && $WORKSPACE/mlnx-project-config/tools/analize.py $CI_ARTIFACTS/logs 2>&1|tee

          source=/tmp/ci-artifacts_$$
          rsync $CI_ARTIFACTS/* $source -a --copy-links -v 2>&1|tee > /dev/null
          rm -f $source/logs/*.log.* 2>&1|tee > /dev/null

          grep -rn Traceb $source/logs/*.log 2>&1|tee > $source/logs/exceptions.txt

          gzip -9 -r $source 2>&1|tee > /dev/null
          rm -rf $CI_ARTIFACTS 2>&1|tee
          cp -r $source $CI_ARTIFACTS
          chmod +r -R $CI_ARTIFACTS
          rm -rf $source 2>&1|tee
          echo "********************************************"
          cd $CI_ARTIFACTS
          find .

          # NOTE: this is based on the fact that all MultiNode nodes labled as SRIOV_MN_CONTROLLER
          # or SRIOV_MN_COMPUTE
          NODE_TYPE=`echo $NODE_LABELS |grep 'SRIOV_MN'|cut  -d' ' -f1|cut -d'_' -f3`

          UPLOAD_LOGPATH_TEMPEST=${LOG_PATH:-${JOB_NAME}/${BUILD_NUMBER}_${NODE_NAME}}
          UPLOAD_LOGPATH=${UPLOAD_LOGPATH_TEMPEST}/${NODE_TYPE}

          target=/var/www/html/${UPLOAD_LOGPATH}

          ssh $LOGSERVER mkdir -p ${target}

          scp -r $CI_ARTIFACTS/* $LOGSERVER:$target 2>&1 | tee > /dev/null
          # Copy tempest results
          scp -r $CI_ARTIFACTS/te* $LOGSERVER:/var/www/html/$UPLOAD_LOGPATH_TEMPEST  2>&1|tee > /dev/null

          ip=$(echo $LOGSERVER | cut -d'@' -f2)
          echo "Detailed logs: http://$ip/$UPLOAD_LOGPATH"

          if [ -f $CI_ARTIFACTS/stestr_results.html.gz ]; then
              echo "Tempest results: http://$ip/$UPLOAD_LOGPATH/stestr_results.html.gz"
              echo "Devstack configuration: http://$ip/$UPLOAD_LOGPATH/local.conf.gz"
          fi

          if [ ! -z "$LOG_PATH" ]; then
              REVIEW_PATH=`echo $UPLOAD_LOGPATH|cut -d'/' -f2`
              echo "https://review.openstack.org/#/c/$REVIEW_PATH"
          fi

          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: produce-readme-file
    builders:
      - shell: |
          #!/bin/bash -ex
          if [ ! -d $LOGDIR ];then
          mkdir -p $LOGDIR
          fi
          cat > $LOGDIR/README <<EOF
          Mellanox 3rd party CI
          ---------------------
          Job Name: $JOB_NAME
          Build started at `date --universal`

          Contact information:
          Email: lennyb@mellanox.com
          IRC: lennyb on #openstack-infra
          EOF

- builder:
    name: clone-devstack
    builders:
      - shell: |
          #!/bin/bash -ex
          phase="CLONE-DEVSTACK"
          echo "STARTED: ############## $phase  ###################"

          [ -d $WORKSPACE/devstack ] && sudo rm -rf $WORKSPACE/devstack

          #git clone /home_stack/git/devstack
          git clone https://github.com/openstack-dev/devstack.git
          pushd $WORKSPACE/devstack
          #git fetch https://git.openstack.org/openstack-dev/devstack refs/changes/74/555174/1 && git checkout FETCH_HEAD
          ZUUL_BRANCH=${ZUUL_BRANCH:='master'}
          git fetch
          git checkout $ZUUL_BRANCH
          git pull

          #workaround remove old cloud.yaml to avoid keystone auth problems
          rm -rf ~/.config/openstack
          echo "FINISHED: ############## $phase  ###################"


- builder:
    name: clone-git
    builders:
      - shell: |
          #!/bin/bash -x

          dayofweek=$(date +%u)
          if [ "$dayofweek" != '0' ] && [ -d /home_stack/git/neutron ]; then
          #if [ $dayofweek != '0' ] && [ -d /home_stack/git/neutron ] ;then
              echo "Not Sunday no git update"
          #    exit 0
          else
              echo "Sunday. It's a git update date"
          fi

          REPOS=(
                     git://git.openstack.org/openstack/requirements.git
                     git://git.openstack.org/openstack/keystone.git
                     git://git.openstack.org/openstack/glance.git
                     https://github.com/novnc/noVNC.git
                     git://git.openstack.org/openstack-dev/devstack
                     git://git.openstack.org/openstack/horizon
                     git://git.infradead.org/users/hch/nvmetcli.git
                     https://github.com/linux-nvme/nvme-cli.git
                     https://github.com/agrover/configshell-fb
                     git://git.openstack.org/openstack/keystone.git
                     git://git.openstack.org/openstack/neutron
                     git://git.openstack.org/openstack/cinder.git
                     git://git.openstack.org/openstack/nova.git
                     git://git.openstack.org/openstack/tempest.git
                     https://github.com/Mellanox/mlnx-project-config.git
                     git://git.infradead.org/users/hch/nvmetcli.git
                     https://github.com/linux-nvme/nvme-cli.git
                     https://github.com/agrover/configshell-fb
                     https://github.com/openstack/os-vif
          )
          echo "Updating ${REPOS[@]}"

          repo_dir=/home_stack/git
          [ ! -d $repo_dir ] && mkdir -p $repo_dir
          pushd $repo_dir

          for repo in ${REPOS[@]}; do
              git clone $repo 2>&1|tee > /dev/null
          done
          for repo in $(ls); do
              l=$(echo $repo |cut -d'.' -f1)
              pushd $l
              git checkout ${ZUUL_BRANCH:-master}
              git pull
              popd
          done


          popd
- builder:
    name: delete-fdb
    builders:
        - shell: |
            #!/bin/bash
            phase="DELETE_MAC_NOVA"
            echo "STARTED: ############## $phase  ###################"
            echo "NOVA CI clean macs"
            tmp_file="/tmp/del_macs_$$"
            sudo bridge fdb show |grep fa:16 | awk '{print "sudo bridge fdb del " $1 " dev " $3}' > $tmp_file
            bash -x $tmp_file 2>&1|tee > /dev/null
            rm -f $tmp_file
            echo "FINISHED: ############## $phase  ###################"
