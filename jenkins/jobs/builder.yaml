- project:
    name: Kernel-Build
    node: builder
    jobs:
      - 'Kernel-Build'

- job-template:
    name: 'Kernel-Build'
    node: '{node}'
    triggers:
      - timed: 'H 0 * * *'
    concurrent: false
    parameters:
      - string:
          name: version
          default: 9.9.99
    builders:
      - inject:
          properties-content: |
            LOGDIR=$WORKSPACE/ci-artifacts/logs
            PATH=$PATH:/usr/sbin
            EXT_SERVER=13.74.249.42
            LOGSERVER=cloudx@$EXT_SERVER
            IMAGE_SERVER=$EXT_SERVER
            PATH=$PATH:/usr/sbin
      - clean-build-machine
      - build-kernel
      - produce-readme-file
    properties:
      - build-discarder:
          days-to-keep: 60
          num-to-keep: 100
          artifact-days-to-keep: 60
          artifact-num-to-keep: 100
    publishers:
      - email-ext:
          recipients: lennyb@mellanox.com
          subject: Failed Mellanox CI {name}
          failure: true
          body: "Hello, my dear friend,\nunfortunately we have some issues in CI,\nplease, take a beer and lets take a look\n\n$DEFAULT_CONTENT\nhttp://$EXT_SERVER/$LOG_PATH/\nhttp://$EXT_SERVER/$JOB_NAME_$BUILD_NUMBER"
      - upload-console-log #This line must be the last one

- builder:
    name: clean-build-machine
    builders:
        - shell: |
            #!/bin/bash -x
            sudo rm -rf /home_stack/rpmbuild

- builder:
    name: build-kernel
    builders:
        - shell: |
            #!/bin/bash -x

            function version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }

            status=0
            pushd /home_stack
            v=${version}
            # Evaluate the latest upstream version
            if [ "$v" == "9.9.99" ]; then
                v=$(lynx --dump https://cdn.kernel.org/pub/linux/kernel/v4.x/ |awk '{print $NF}'|grep patch|grep xz|cut -d'-' -f2|sort -Vr|head -n1)
                y=${v%.xz}
                version_to_build=$(echo ${y##*/})
                rm -f index.html*
            fi
            echo "Latest version on https://cdn.kernel.org/pub/linux/kernel/v4.x/ is $version_to_build"

            # Evaluate the latest built version
            latest=$(basename $(ssh cloudx@13.74.249.42 ls -l /var/www/html/kernel/latest-kernel.src.rpm|awk '{print $NF}'))
            latest_built_version=$(echo $latest|cut -d'-' -f2)
            echo "Latest version on http://$EXT_SERVER/kernel/ is $latest_built_version"

            if version_gt $latest_built_version $version_to_build; then
                echo "$latest_built_version is greater than $version_to_build"
                echo "No newer kernels on https://cdn.kernel.org/pub/linux/kernel/v4.x/"
                exit 0
            fi
            echo "Downloading kernel $version_to_build from https://cdn.kernel.org/pub/linux/kernel/v4.x/"

            log=$LOGDIR/kernel-${version_to_build}.log
            wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-${version_to_build}.tar.xz
            tar xvf linux-${version_to_build}.tar.xz
            cd linux-${version_to_build}
            sudo scripts/kconfig/merge_config.sh -n /boot/config-$(uname -r)
            make rpm-pkg > $log
            status=$?
            tail -n300 $log
            for file in $(find /home_stack/rpmbuild/ -name *${version_to_build}*.rpm); do
                scp $file $LOGSERVER://var/www/html/kernel
                filename=$(basename $file)
                pkg=$(echo $filename |sed "s/-$version_to_build-[0-9]//g")
                ssh $LOGSERVER "ln -snf /var/www/html/kernel/$filename /var/www/html/kernel/latest-$pkg"
            done
            rm -rf /home_kernel/linux-${version_to_build}*
            exit $status
